<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>气泡图</title>
    <link href="/2021/09/29/qipao/"/>
    <url>/2021/09/29/qipao/</url>
    
    <content type="html"><![CDATA[<figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">library(ggplot2)<br>colors &lt;-c(<span class="hljs-string">&quot;#E41A1C&quot;</span>,<span class="hljs-string">&quot;#000000&quot;</span>,<span class="hljs-string">&quot;#FF8C00&quot;</span>,<span class="hljs-string">&quot;#4DAF4A&quot;</span>,<span class="hljs-string">&quot;#984EA3&quot;</span>,<br>           <span class="hljs-string">&quot;#40E0D0&quot;</span>)<br>Ap3.<span class="hljs-number">2</span>&lt;-read.csv(<span class="hljs-string">&quot;Ap3.2.csv&quot;</span>)<br>#Ap3.<span class="hljs-number">1</span>$SWA&lt;-factor(Ap3.<span class="hljs-number">1</span>$SWA,levels = c(<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;CAD&quot;</span>,<span class="hljs-string">&quot;HIS&quot;</span>,<br>#                                      <span class="hljs-string">&quot;SPD&quot;</span>,<span class="hljs-string">&quot;SPE&quot;</span>,<span class="hljs-string">&quot;BAs&quot;</span>))<br>Ap3.<span class="hljs-number">2</span>$samples&lt;-factor(Ap3.<span class="hljs-number">2</span>$samples,levels =c(<span class="hljs-string">&quot;b_1&quot;</span>,<span class="hljs-string">&quot;b_3&quot;</span>,<span class="hljs-string">&quot;b_5&quot;</span>,<span class="hljs-string">&quot;b_10&quot;</span>,<span class="hljs-string">&quot;b_20&quot;</span>,<span class="hljs-string">&quot;b_45&quot;</span>,                                              <span class="hljs-string">&quot;d_1&quot;</span>,<span class="hljs-string">&quot;d_3&quot;</span>,<span class="hljs-string">&quot;d_5&quot;</span>,<span class="hljs-string">&quot;d_10&quot;</span>,<span class="hljs-string">&quot;d_20&quot;</span>,<span class="hljs-string">&quot;d_45&quot;</span>))<br><br>p3 &lt;- ggplot(Ap3.<span class="hljs-number">2</span>, aes(samples,KO)) +<br>  geom<span class="hljs-constructor">_point(<span class="hljs-params">aes</span>(<span class="hljs-params">size</span> = KOsize,<span class="hljs-params">color</span>=SWA)</span>,show.legend = TRUE) +<br>  scale<span class="hljs-constructor">_size_continuous(<span class="hljs-params">range</span> = <span class="hljs-params">c</span>(1, 9)</span>) +<br>  scale<span class="hljs-constructor">_color_manual(<span class="hljs-params">values</span> = <span class="hljs-params">colors</span>)</span>+<br>  theme<span class="hljs-constructor">_bw()</span> +<br>  theme(panel.grid =element<span class="hljs-constructor">_blank()</span>)+<br>  theme(axis.text.x = element<span class="hljs-constructor">_text(<span class="hljs-params">angle</span> = 45, <span class="hljs-params">hjust</span> = 1, <span class="hljs-params">vjust</span> = 1)</span>) +<br>  labs(x = &#x27;&#x27;, y = &#x27;&#x27;)<br>p3<br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/29/qipao/1.png"></p><p>#素材</p><p>#链接：<a href="https://pan.baidu.com/s/1rJRQra7fhkpc79cT3tRAEg">https://pan.baidu.com/s/1rJRQra7fhkpc79cT3tRAEg</a><br>#提取码：1111 </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>lefse</title>
    <link href="/2021/09/29/lefse/"/>
    <url>/2021/09/29/lefse/</url>
    
    <content type="html"><![CDATA[<p>注：参考来自网络，如侵权则删。</p><p>#素材</p><p>#链接：<a href="https://pan.baidu.com/s/1lxjnGAb3LLYabmG5wiFi-A">https://pan.baidu.com/s/1lxjnGAb3LLYabmG5wiFi-A</a><br>#提取码：1111<br>–来自百度网盘超级会员V3的分享</p><p>##对应于上述 A-F 6 个模块，本地版的命令行操作示例如下</p><p>#A，设置 LEfSe 的数据格式，详情 format_input.py -h</p><p>#-c，指定 class 的行（必须指定）；-s，指定 sub_class 的行（可缺省）；</p><p>#-u，指定 subject_id 的行（可缺省）；-o，设置归一化值，默认 -1 即不执行标准化</p><p>#注：版本问题，有时 format_input.py 命令找不到，可能为 lefse-format_input.py</p><p>#python format_input.py lefse_test.txt A_lefse_test.in -c 1 -s 2 -u 3 -o 1000000</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">format_input</span>.py lefse_test.txt A_lefse_test.in -c <span class="hljs-number">1</span> -s <span class="hljs-number">2</span> -u <span class="hljs-number">3</span> -o <span class="hljs-number">1000000</span>`<br></code></pre></div></td></tr></table></figure><p>#B，LEfSe 分析，详情 run_lefse.py -h</p><p>#-l 2.0，设定 LDA 得分的对数值的最低阈值为 2</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">run_lefse.py <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A_lefse_test</span>.</span></span><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B_lefse_test</span>.</span></span>res -l <span class="hljs-number">2.0</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/29/lefse/1.png"></p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">run_lefse.py <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A_lefse_test</span>.</span></span><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B_lefse_test</span>.</span></span>res -l <span class="hljs-number">4.0</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/29/lefse/2.png"></p><p>#备注：对于 B 的输出，我们可以选择从中删一些不必要（不显著）的数据，</p><p>#以增强 C、D、E 作图时的美感</p><p>#C，绘制 LEfSe 得分值，详情 plot_res.py -h</p><p>#注：版本问题，有时 plot_res.py 命令找不到，可能为 lefse-plot_res.py</p><p>#lefse-plot_res.py B_lefse_test.res C_lefse_test.lda.pdf –format pdf –dpi 150 –width 16</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">plot_res<span class="hljs-selector-class">.py</span> B_lefse_test<span class="hljs-selector-class">.res</span> C_lefse_test<span class="hljs-selector-class">.lda</span><span class="hljs-selector-class">.pdf</span> --format pdf --dpi <span class="hljs-number">150</span> --<span class="hljs-attribute">width</span> <span class="hljs-number">16</span><br></code></pre></div></td></tr></table></figure><p>#D，绘制进化分支图，详情 plot_cladogram.py -h</p><p>#注：版本问题，有时 plot_cladogram.py 命令找不到，可能为 lefse-plot_cladogram.py</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">plot_cladogram.py <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B_lefse_test</span>.</span></span>res <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">D_lefse_test</span>.</span></span>cladogram.pdf --format pdf --dpi <span class="hljs-number">150</span><br></code></pre></div></td></tr></table></figure><p><img src="/2021/09/29/lefse/3.png"></p><p><img src="/2021/09/29/lefse/4.png"></p><p>#E，单张图的展示略，直接使用 F 绘制所有的图</p><p>#F，绘制差异特征，详情 plot_features.py -h</p><p>#注：版本问题，有时 plot_features.py 命令找不到，可能为 lefse-plot_features.py</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">mkdir -p F_out<br>plot_features.py <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">A_lefse_test</span>.</span></span><span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">B_lefse_test</span>.</span></span>res F_out/lefse_test --format pdf --dpi <span class="hljs-number">200</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>conda命令</title>
    <link href="/2021/09/29/conda%E7%8E%AF%E5%A2%83%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/29/conda%E7%8E%AF%E5%A2%83%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment"># 下载最新版的miniconda3</span><br>wget https:<span class="hljs-regexp">//</span>repo.anaconda.com<span class="hljs-regexp">/miniconda/</span>Miniconda3-latest-Linux-x86_64.sh<br><span class="hljs-comment"># 运行安装程序</span><br>sh Miniconda3-latest-Linux-x86_64.sh<br><span class="hljs-comment">#查看环境、</span><br>conda env list<br><span class="hljs-comment">#删除环境</span><br>conda remove -n python3 --all<br><span class="hljs-comment">#激活环境</span><br>conda activate 环境名<br><span class="hljs-comment">#导出环境</span><br>conda env export --file qiime2-<span class="hljs-number">2019.7</span>.yml<br><span class="hljs-comment">#关闭工作环境</span><br>conda deactivate<br><span class="hljs-comment">#安装环境</span><br>conda env create -n qiime2-<span class="hljs-number">2019.7</span> --file qiime2-<span class="hljs-number">2019.7</span>.yml<br><span class="hljs-comment">#关于channels:</span><br><span class="hljs-comment">#配制anaconda镜像</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/main/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/conda-forge/</span><br>conda config --add channels https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/bioconda/</span><br>conda config --set show_channel_urls yes<br><span class="hljs-comment">#指定安装某个包</span><br>conda install python=<span class="hljs-number">3.7</span>.<span class="hljs-number">4</span><br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>seqkit</title>
    <link href="/2021/09/12/seqkit/"/>
    <url>/2021/09/12/seqkit/</url>
    
    <content type="html"><![CDATA[<p><a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/08_seqkit/">Seqkit</a> 是由国人 <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/08_seqkit/">shenwei</a> 开发，功能强大的命令行序列处理工具套件。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><table><thead><tr><th align="left">子命令</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">common</td><td align="left">find common sequences of multiple files by id/name/sequence</td></tr><tr><td align="left">concat</td><td align="left">concatenate sequences with same ID from multiple files</td></tr><tr><td align="left">convert</td><td align="left">convert FASTQ quality encoding between Sanger, Solexa and Illumina</td></tr><tr><td align="left">duplicate</td><td align="left">duplicate sequences N times</td></tr><tr><td align="left">faidx</td><td align="left">create FASTA index file and extract subsequence</td></tr><tr><td align="left">fq2fa</td><td align="left">convert FASTQ to FASTA</td></tr><tr><td align="left">fx2tab</td><td align="left">convert FASTA/Q to tabular format (with length/GC content/GC skew)</td></tr><tr><td align="left">genautocomplete</td><td align="left">generate shell autocompletion script</td></tr><tr><td align="left">grep</td><td align="left">search sequences by ID/name/sequence/sequence motifs, mismatch allowed</td></tr><tr><td align="left">head</td><td align="left">print first N FASTA/Q records</td></tr><tr><td align="left">help</td><td align="left">Help about any command</td></tr><tr><td align="left">locate</td><td align="left">locate subsequences/motifs, mismatch allowed</td></tr><tr><td align="left">mutate</td><td align="left">edit sequence (point mutation, insertion, deletion)</td></tr><tr><td align="left">range</td><td align="left">print FASTA/Q records in a range (start:end)</td></tr><tr><td align="left">rename</td><td align="left">rename duplicated IDs</td></tr><tr><td align="left">replace</td><td align="left">replace name/sequence by regular expression</td></tr><tr><td align="left">restart</td><td align="left">reset start position for circular genome</td></tr><tr><td align="left">rmdup</td><td align="left">remove duplicated sequences by id/name/sequence</td></tr><tr><td align="left">sample</td><td align="left">sample sequences by number or proportion</td></tr><tr><td align="left">seq</td><td align="left">transform sequences (revserse, complement, extract ID…)</td></tr><tr><td align="left">shuffle</td><td align="left">shuffle sequences</td></tr><tr><td align="left">sliding</td><td align="left">sliding sequences, circular genome supported</td></tr><tr><td align="left">sort</td><td align="left">sort sequences by id/name/sequence/length</td></tr><tr><td align="left">split</td><td align="left">split sequences into files by id/seq region/size/parts (mainly for FASTA)</td></tr><tr><td align="left">split2</td><td align="left">split sequences into files by size/parts (FASTA, PE/SE FASTQ)</td></tr><tr><td align="left">stats</td><td align="left">simple statistics of FASTA/Q files</td></tr><tr><td align="left">subseq</td><td align="left">get subsequences by region/gtf/bed, including flanking sequences</td></tr><tr><td align="left">tab2fx</td><td align="left">convert tabular format to FASTA/Q format</td></tr><tr><td align="left">translate</td><td align="left">translate DNA/RNA to protein sequence</td></tr><tr><td align="left">version</td><td align="left">print version information and check for update</td></tr></tbody></table><h3 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h3><p>spades 组装完毕的序列，提取其中某个 node 或者某些 nodes 序列：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>seqkit grep -r -p ^node_1<span class="hljs-variable">$ </span>scaffolds.fasta &gt; node_1.fasta<br></code></pre></div></td></tr></table></figure><p>将 scaffolds 中所有 nodes 提取到单独的 fasta 文件中：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$(</span>awk <span class="hljs-string">&#x27;/&gt;/&#x27;</span> scaffolds.fasta | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>); \<br>&gt; <span class="hljs-keyword">do</span> seqkit grep -p <span class="hljs-variable">$&#123;</span><span class="hljs-symbol">i:</span><span class="hljs-number">1</span>&#125; scaffolds.fasta &gt; <span class="hljs-variable">$&#123;</span><span class="hljs-symbol">i:</span><span class="hljs-number">1</span>&#125;.fasta; \<br>&gt; done<br></code></pre></div></td></tr></table></figure><h3 id="seq-命令"><a href="#seq-命令" class="headerlink" title="seq 命令"></a>seq 命令</h3><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>seqkit seq -h<br></code></pre></div></td></tr></table></figure><p>-n和-i  -l和-u</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"># 将 reads 的名称信息输出，如果要和 bioawk $name 相同，使用 -i 参数<br>$ seqkit seq -n <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_1</span>.</span></span>fastq.gz <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_2</span>.</span></span>fastq.gz<br>SRR1175124.<span class="hljs-number">102354</span> <span class="hljs-number">102354</span> length=<span class="hljs-number">150</span><span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>$ bioawk -c fastx &#x27;&#123;print $name&#125;&#x27; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_1</span>.</span></span>fastq.gz <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_2</span>.</span></span>fastq.gz<br>SRR1175124.<span class="hljs-number">102354</span><span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>$ seqkit seq -<span class="hljs-keyword">in</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_1</span>.</span></span>fastq.gz <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SRR1175124_2</span>.</span></span>fastq.gz<br>SRR1175124.<span class="hljs-number">102354</span><span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span><br><span class="hljs-operator"></span>#<br></code></pre></div></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"># 下载 NC_001477<br>$ efetch -db nuccore -id NC_001477 -format fasta &gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NC_001477</span>.</span></span>fasta<br># 翻译 DNA 序列为氨基酸序列<br>$ seqkit translate -j <span class="hljs-number">4</span> -o <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NC_001477</span>.</span></span>pep <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NC_001477</span>.</span></span>fasta<br>#<br></code></pre></div></td></tr></table></figure><p>对注释的多拷贝基因提取序列后进行序列比对</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 用prokka注释基因组拼接序列</span><br><span class="hljs-variable">$</span> prokka -<span class="hljs-literal">-rfam</span> -<span class="hljs-literal">-prefix</span> sample -<span class="hljs-literal">-outdir</span> sample contig.fa<br><span class="hljs-comment"># 用 seqkit 提取多拷贝基因 ncRNA Qrr 的序列</span><br><span class="hljs-variable">$</span> grep <span class="hljs-string">&#x27;Qrr&#x27;</span> sample/sample.gff | <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$</span>(awk <span class="hljs-string">&#x27;&#123;print $9&#125;&#x27;</span>); <span class="hljs-keyword">do</span> seqkit grep <span class="hljs-literal">-p</span> <span class="hljs-variable">$</span>&#123;i:<span class="hljs-number">3</span>:<span class="hljs-number">14</span>&#125; sample.ffn &gt;&gt; qrr.fa; done<br><span class="hljs-comment"># mafft 序列比对</span><br><span class="hljs-variable">$</span> mafft qrr.fa &gt; qrr.mafft<br><span class="hljs-comment"># raxml 快速构建进化树</span><br><span class="hljs-variable">$</span> raxmlHPC <span class="hljs-operator">-f</span> a <span class="hljs-literal">-p</span> <span class="hljs-number">12345</span> <span class="hljs-literal">-x</span> <span class="hljs-number">12345</span> -<span class="hljs-comment"># 1000 -m GTRGAMMA -s qrr.mafft -n qrr</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>entrez工具</title>
    <link href="/2021/09/12/entrez/"/>
    <url>/2021/09/12/entrez/</url>
    
    <content type="html"><![CDATA[<p><a href="mailto:indexofire@gmail.com">Mark Renton</a> 更新于: 2020-09-14</p><hr><h2 id="Entrez-是什么"><a href="#Entrez-是什么" class="headerlink" title="Entrez 是什么"></a>Entrez 是什么</h2><hr><h2 id="玩转-entrez-direct"><a href="#玩转-entrez-direct" class="headerlink" title="玩转 entrez-direct"></a>玩转 entrez-direct</h2><p>内容简介</p><p><a href="https://www.ncbi.nlm.nih.gov/">NCBI</a> 的 <a href="https://www.ncbi.nlm.nih.gov/gquery/">Entrez</a> 工具功能非常强大，既可以从 web 页面访问 <a href="https://www.ncbi.nlm.nih.gov/">NCBI</a> 来查询，也可以利用 <a href="https://www.ncbi.nlm.nih.gov/gquery/">Entrez</a> 提供的 <a href="https://www.ncbi.nlm.nih.gov/books/NBK25501/">Web Services</a> 来实现诸多功能（编写第三方程序等）。此外 <a href="https://www.ncbi.nlm.nih.gov/">NCBI</a> 还提供了 <a href="https://www.ncbi.nlm.nih.gov/gquery/">Entrez</a> 的命令行工具 edirect<a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fn:1">1</a>。edirect 全名为 <strong>Entrez Direct</strong>，里面包含了一组各司其职的工具和脚本，通过 Linux 系统下的管道pipeline<a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fn:4">2</a>功能联合使用这些命令行工具，在服务器上实现高效的进行 <a href="https://www.ncbi.nlm.nih.gov/gquery/">Entrez</a> 的检索，抓取，过滤，排序等操作。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><h4 id="1-1-下载安装"><a href="#1-1-下载安装" class="headerlink" title="1.1 下载安装"></a>1.1 下载安装</h4><p>edirect 直接下载预编译包，添加到系统路径中即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载 edirect 安装包</span><br><span class="hljs-meta">$</span><span class="bash"> wget ftp://ftp.ncbi.nlm.nih.gov/entrez/entrezdirect/edirect.tar.gz</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 将 edirect 安装在用户 app 目录下，可以根据需求自行选择安装路径</span><br><span class="hljs-meta">$</span><span class="bash"> tar zxvf edirect.tar.gz -C ~/apps</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 运行安装脚本</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> ~/apps/edirect</span><br><span class="hljs-meta">$</span><span class="bash"> bash ./setup.sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加软件安装目录到系统环境变量中</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export PATH=&#x27;\$PATH:\$HOME/apps/edirect/&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">source</span> ~/.bashrc</span><br></code></pre></div></td></tr></table></figure><p>安装说明</p><p>耐心等待一会，当看到下面字符时，表示安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ENTREZ DIRECT HAS BEEN SUCCESSFULLY INSTALLED AND CONFIGURED<br></code></pre></div></td></tr></table></figure><p> 也可以不运行 <code>setup.sh</code> 直接使用 edirect 的一些工具，不过如果要使用全部功能，有些perl模块需要安装，运行 <code>setup.sh</code> 来自动完成 CPAN 的 modual 安装以及 go 版本的 xtract 的编译（不运行安装脚本会调用 perl 版本的 xtract，数据量大时速度略慢）。 </p><p>提示</p><p>对于部分操作系统如 <strong>ubuntu</strong> 等，<strong>uname</strong> 位于 /bin，而 xtract 接口调用脚本使用 /usr/bin/uname 来判断使用那个版本的 xtract，如果要在这些操作系统下正常使用 xtract，需要让程序在正确路径可识别，这里通过添加系统 link 到 /usr/bin/unname。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看 uname 路径。</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">which</span> uname</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 如果是位于 /bin/ 下，将其链接到 /usr/bin/ 下即可。</span><br><span class="hljs-meta">$</span><span class="bash"> sudo ln -s /bin/uname /usr/bin/uname</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-conda-中安装"><a href="#1-2-conda-中安装" class="headerlink" title="1.2 conda 中安装"></a>1.2 conda 中安装</h4><p>如果系统通过 conda 进行软件管理，可以通过如下方式安装。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">$ conda <span class="hljs-keyword">install</span> entrez-direct<br></code></pre></div></td></tr></table></figure><p>不过 conda 安装的还是 perl 版本的 xtract，而不是 go 版本的，需要到 conda/pkgs 包根目录中的 edirect 相应目录，用 <code>setup.sh</code> 自行编译后生成 xtract.Linux(Linux 操作系统)，将其复制到 conda 的 bin 路径即可。go 版本的 xtract 可以用 -help 参数查看帮助。</p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h3><p>表. 最常用的工具参见下表</p><table><thead><tr><th align="left">工具名称</th><th align="left">工具用途</th><th align="left">常用参数</th></tr></thead><tbody><tr><td align="left"><strong>esearch</strong></td><td align="left">搜索命令，将所要检索的内容提交到 Entrez 中，返回相应的结果记录</td><td align="left">-db、-query</td></tr><tr><td align="left"><strong>efetch</strong></td><td align="left">下载 NCBI 数据库中的记录和报告并以相应格式打印输出</td><td align="left">-db、-id、-format、-mode</td></tr><tr><td align="left"><strong>einfo</strong></td><td align="left">获取目标结果在数据库中的信息</td><td align="left">-db、-dbs、-fields、-links</td></tr><tr><td align="left"><strong>elink</strong></td><td align="left">对目标结果在其他数据库中比配结果</td><td align="left">-db、-id、-related、-target、-name</td></tr><tr><td align="left"><strong>epost</strong></td><td align="left">上传 UIDs 或者 序列登记号</td><td align="left">-db、-id、-format、-input、-label</td></tr><tr><td align="left"><strong>efilter</strong></td><td align="left">对之前的检索结果进行过滤或限制</td><td align="left">-query、-sort、-field</td></tr><tr><td align="left"><strong>xtract</strong></td><td align="left">将esearch获得的 XML 格式结果转换成表格格式</td><td align="left">-pattern、-if、-block、-element、-sep、-filter</td></tr><tr><td align="left"><strong>esummary</strong></td><td align="left">获得 XML 格式的建立</td><td align="left">-db、-id、-format、-mode</td></tr><tr><td align="left"><strong>ecitmatch</strong></td><td align="left">统计引用数据</td><td align="left">-journal、-year、-volume、-page、-author</td></tr></tbody></table><h4 id="2-1-esearch"><a href="#2-1-esearch" class="headerlink" title="2.1 esearch"></a>2.1 esearch</h4><p><strong>esearch</strong> 负责检索并返回 xml 格式的命中情况。使用 esearch 命令，相当于平时你通过浏览器访问 NCBI，在 <a href="https://www.ncbi.nlm.nih.gov/gquery/">GQuery</a> 的 <a href="https://www.ncbi.nlm.nih.gov/nuccore/">nucletide</a> 数据库搜索见面搜素关键字 <code>salmonella</code>，返回命中结果。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> nuccore -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;salmonella&quot;</span><br></code></pre></div></td></tr></table></figure><p>终端里会返回命中结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-section">&lt;ENTREZ_DIRECT&gt;</span><br>  <span class="hljs-section">&lt;Db&gt;</span><span class="hljs-attribute">nuccore</span>&lt;/Db&gt;<br>  <span class="hljs-section">&lt;WebEnv&gt;</span><span class="hljs-attribute">NCID_1_153624467_130</span>.<span class="hljs-number">14</span>.<span class="hljs-number">18</span>.<span class="hljs-number">34</span>_<span class="hljs-number">9001</span>_<span class="hljs-number">1490828308</span>_<span class="hljs-number">1411373464</span>_<span class="hljs-number">0</span>MetA<span class="hljs-number">0</span>_S_MegaStore_F_<span class="hljs-number">1</span>&lt;/WebEnv&gt;<br>  <span class="hljs-section">&lt;QueryKey&gt;</span><span class="hljs-attribute">1</span>&lt;/QueryKey&gt;<br>  <span class="hljs-section">&lt;Count&gt;</span><span class="hljs-attribute">2093561</span>&lt;/Count&gt;<br>  <span class="hljs-section">&lt;Step&gt;</span><span class="hljs-attribute">1</span>&lt;/Step&gt;<br><span class="hljs-section">&lt;/ENTREZ_DIRECT&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>esearch</strong> 需要设置的参数有 <strong>-db</strong>（所要搜索的目标数据库）和 <strong>-query</strong>（所要搜索的关键词）。</p><p>结果默认返回 xml 格式的数据（参见 <code>...</code>），其中 中的数值表示检索命中的记录数，这与 <a href="https://www.ncbi.nlm.nih.gov/">NCBI</a> 的 <a href="https://www.ncbi.nlm.nih.gov/gquery/">Entrez</a> 网页界面里进行检索操作的结果是一致的。</p><p><strong>esearch</strong> 还有一个参数 -sort 可以根据数据库类型返回不同的排序方式。默认的排序方式是按照时间逆序排列的。想要得到准确的查询结果，优化 query 很重，可以参见 <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#3-filtering-queries">Filter</a> 相关内容。</p><h4 id="2-2-efetch"><a href="#2-2-efetch" class="headerlink" title="2.2 efetch"></a>2.2 efetch</h4><p><strong>efetch</strong> 可以用来下载各个数据库的各种格式数据。你可以通过2种方式下载：</p><ol><li>用 esearch 获得命中记录后再下载。下面这个命令，就会下载所有结果并保存到 result.fasta 文件中。</li></ol><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> nuccore -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;salmonella&quot;</span> -days 10 | \<br>&gt; efetch -<span class="hljs-keyword">format</span> fasta -<span class="hljs-keyword">db</span> nuccore &gt; result.fasta<br></code></pre></div></td></tr></table></figure><p>Warning</p><p>一定要注意搜索命中值的数量，关键词命中太多，数据量会太大，全部下载可能直接进入假死状态。应该通过设置参数来限定搜索结果。当不确定时，先用esearch工具看返回的命中值有多少再决定是否进一步限定。</p><ol><li>直接指定 id 下载</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ efetch -db pubmed -<span class="hljs-built_in">id</span> <span class="hljs-number">2142131</span> -<span class="hljs-built_in">format</span> txt<br></code></pre></div></td></tr></table></figure><p><strong>efetch</strong> 设置的参数是 <strong>-db</strong>，将搜索命中的记录从该数据库进行。如果 <strong>esearch</strong> 检索的结果和需要下载的结果来自同一数据库，可以不添加 <strong>-db</strong> 参数，系统会默认使用esearch的数据库。</p><p><strong>efetch</strong> 还要设置的参数是 <strong>-format</strong>，即下载数据的格式。常用的有 <strong>xml</strong> 格式，后续可以通过 <strong>xtract</strong> 和 <strong>linux</strong> 一些命令行工具来做处理。你也可以直接添加 <strong>-id</strong> 参数直接进行下载而不通过 <strong>esearch</strong> 检索后下载。如下面例子中将 <strong>pubmed id 2137412</strong> 的文献输出，格式为 Medline<a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fn:2">3</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 搜索 pubmed 数据库编号 2137412 的文献，以 medline 格式输出</span><br>$ efetch -db pubmed -<span class="hljs-built_in">id</span> <span class="hljs-number">2137412</span> -<span class="hljs-built_in">format</span> medline<br></code></pre></div></td></tr></table></figure><p>对于 efetch 可以下载那些数据库，对于各个数据库名称和数据格式，可以用<code>-h</code>来查看</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>efetch -h<br></code></pre></div></td></tr></table></figure><h4 id="2-3-xtract"><a href="#2-3-xtract" class="headerlink" title="2.3 xtract"></a>2.3 xtract</h4><p>edirect 的核心命令，由于 <strong>esearch</strong> 查询和下载的数据常常是 xml 格式的，对于 XML<a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fn:3">4</a> 格式的数据，可以用 <strong>xtract</strong> 工具将其转换成纯文本格式的内容。xtract 不仅可以转换 <a href="https://www.ncbi.nlm.nih.gov/">NCBI</a> 的 XML 格式文件，对于任何通用的 XML 格式文件都可以进行转换。</p><p>xtract 基本用法：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"># 读取 <span class="hljs-type">XML</span> 文件方式<br>$ xtract -<span class="hljs-keyword">input</span> <span class="hljs-type">XML</span>-file.xml<br></code></pre></div></td></tr></table></figure><p>一般我们都是通过管道工具 Pipeline 组合 esearch 和 efetch 等工具获得 XML 格式的 NCBI 数据库命中记录后，再用 xtract 进行处理。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">$ esearch -db pubmed -query &#x27;E. coli AND (<span class="hljs-number">2016/12/30</span>[pdat]:<span class="hljs-number">2016/12/31</span>[pdat])&#x27; <span class="hljs-string">| \</span><br>&gt; efetch -format xml <span class="hljs-string">| xtract -pattern PubmedArticle -element \</span><br>&gt; MedlineCitation/PMID Journal/ISOAbbreviation ArticleTitle<br></code></pre></div></td></tr></table></figure><p>这条命令将检索到的文献记录转换成行，再以 PMID，杂志名缩写和文章题目为列展开。命令打印的结果如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-number">28239441</span>J Public Health AfrQuality <span class="hljs-keyword">and </span>labeling information of Mo       ringa oleifera products marketed for HIV-infected people in Zimbabwe.<br><span class="hljs-number">28115890</span>Korean <span class="hljs-keyword">J </span>Food <span class="hljs-keyword">Sci </span>Anim ResourAntimicrobial Activity of Kefir against Variou     s Food Pathogens <span class="hljs-keyword">and </span>Spoilage <span class="hljs-keyword">Bacteria.</span><br><span class="hljs-keyword"></span><span class="hljs-number">28110668</span>Enzyme Microb. Technol  .A novel thermophilic <span class="hljs-keyword">and </span>halophilic esterase from <span class="hljs-keyword">Janibacter </span><span class="hljs-built_in">sp</span>. R02,   the first member of a new lipase family (Family XVII).<br>...<br><span class="hljs-number">27030192</span>J.   Vet. <span class="hljs-keyword">Sci.Development </span><span class="hljs-keyword">and </span>evaluation of an immunochromatographic assay   using a gp51 monoclonal antibody for the detection of antibodies against the <span class="hljs-keyword">bovine </span>leukemia virus.<br></code></pre></div></td></tr></table></figure><p>当我们不清楚XML元素结构时，可以用以下命令打印出树形结构。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">$ xtract -input my.<span class="hljs-keyword">xml</span> <span class="hljs-title">-outline</span><br></code></pre></div></td></tr></table></figure><p>xtract 可以灵活的改变数据的格式，所以涉及的参数也比较多。要想获得自己需要的数据格式，要想用好 edirect，掌握好 xtract 的用法是必不可少的。</p><p><strong>-pattern 参数</strong>: 将 xml 格式数据，将转换成行格式数据。每一个element包含的数据做为一行。</p><p>xtract 命令首先要通过 -pattern 定义所要分析的数据级别。比如对于 pubmed 数据库，efetch 输出 -format 格式为 docsum，那么我们一般要抓取的是每一个命中的文献记录，-pattern 就可以用 DocumentSummary 元素。如果你只想知道所有命中文献的作者（比如按照次数排序），那么就可以直接将 -pattern 定义为 Author。</p><p><strong>-element 参数</strong>: 将 <strong>-pattern</strong> 定义的行中以每个element形成一列。每个element以tab键分隔。</p><p>每个 -pattern 定义后，要多 -pattern 定义的元素的子元素进行输出，就要用到 -element 参数了。-element 可以跟多个子元素，默认以tab键分割。但是要注意的是子元素必须是唯一子元素，比如 -pattern 如果定义为 DocumentSummary，那么每个 DocumentSummary 元素有一个 Authors 子元素，而每个 Authors 有多个 Author 子元素（因为一篇文献有多个作者），如果直接将 -element Author，是无法返回作者信息的。需要用 -block 参数把 Authors 列转换成行再进行分割。</p><p><strong>-block 参数</strong>: 可以将某个XML标签下的多个相同标签转换成一行的多个元素，最常见的用法是在 <code>pubmed</code> 数据库检索文献时下多个标签打印出来。</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">$ esearch -db pubmed -query <span class="hljs-string">&quot;Salmonella[ORGN]&quot;</span> -days <span class="hljs-number">5</span> | <span class="hljs-type">efetch</span> -format xml | <span class="hljs-type">\</span><br><span class="hljs-type">&gt; xtract</span> -<span class="hljs-built_in">pattern</span> PubmedArticle -block Author -sep <span class="hljs-string">&quot; &quot;</span> -element LastName,Initials<br></code></pre></div></td></tr></table></figure><p><strong>-tab、-sep 参数</strong>: 将多条 element 记录分割。</p><p><strong>/</strong>: 主要用在定义连续多层标签的定义上。比如PMID标签即可以在 MedlineCitation 标签下，有时也会在 RefSource 标签下。所以要明确检索文献的 PMID，就应该用 <strong>MedlineCitation/PMID</strong></p><p><strong>@</strong>: 指定 XML 元素 element 的 attribute 值</p><p><strong>-if、-if/-equals、-if/-contains 参数</strong>: 条件运算符</p><p><strong>-and、-or、-position、-def 参数</strong>: 关系运算符</p><h4 id="2-4-elink"><a href="#2-4-elink" class="headerlink" title="2.4 elink"></a>2.4 elink</h4><p>当我们要检索一个数据库数据所关联到其他数据库时，就要用到elink工具了。比如我们先在SRA数据库中搜索到所有鼠伤寒沙门菌的SRA实验数据，然后链接到biosample数据库，获得这些菌株的生物样本信息。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> sra -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;salmonella typhimurium&quot;</span> | elink -target biosample | efetch -<span class="hljs-keyword">format</span> docsum &gt; result.xml<br></code></pre></div></td></tr></table></figure><h4 id="2-4-einfo"><a href="#2-4-einfo" class="headerlink" title="2.4 einfo"></a>2.4 einfo</h4><p>对于 NCBI 数据库的各项复杂参数，字段等要完全了解和掌握比较困难。edirect 里提供了 einfo 工具，这样其他工具所能访问的具体数据库、字段和可链接数据库等信息都可以用 einfo 了解。</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs powershell"><span class="hljs-comment"># 查询 `esearch -db` 参数所能访问的所有数据库名称</span><br><span class="hljs-variable">$</span> einfo <span class="hljs-literal">-dbs</span> | <span class="hljs-built_in">sort</span><br><br><span class="hljs-comment"># 查询某个数据库字段情况，如 sra 数据库所有对应的字段名称</span><br><span class="hljs-variable">$</span> einfo <span class="hljs-literal">-db</span> sra <span class="hljs-literal">-fields</span><br><br><span class="hljs-comment"># 查询数据库所有可链接的其他数据库</span><br><span class="hljs-variable">$</span> einfo <span class="hljs-literal">-db</span> sra <span class="hljs-literal">-links</span><br></code></pre></div></td></tr></table></figure><h3 id="3-高级检索"><a href="#3-高级检索" class="headerlink" title="3. 高级检索"></a>3. 高级检索</h3><p>工具 esearch 和 efilter 在做检索时如果做好筛选，能有助于获得准确的结果。筛选有2种方式，一种是通过添加参数来筛选。另一种是对 query 参数添加字段定义来筛选。</p><p><strong>参数过滤</strong>：</p><p>常用的参数为日期参数</p><ul><li>-days 100：100天内的检索条件命中</li><li>-maxdate：时间段最大日期，格式可以是 2001，2001/01/01</li><li>-mindate：时间段最小日期，格式可以是 2001，2001/01/01</li><li>-datetype: PDAT 发布时间；MDAT 修改时间</li></ul><p><strong>字段定义</strong>：</p><p>-query参数: esearch 和 efilter 通过添加该参数进行检索或过滤相应的关键词，query参数可以添加 filter，不同数据库可选择的filter可以用下面命令来查看。</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-comment"># 查看sra数据库的filter</span><br>$ <span class="hljs-keyword">einfo </span>-db <span class="hljs-keyword">sra </span>-fields<br><br><span class="hljs-comment"># 查看sra数据库field，用xtract格式化输出</span><br>$ <span class="hljs-keyword">einfo </span>-db <span class="hljs-keyword">sra </span><span class="hljs-title">| xtract -pattern Field -element Name Description</span><br></code></pre></div></td></tr></table></figure><p>-query 检索词可以用逻辑关键词构建逻辑关系：</p><ul><li>AND：和</li><li>OR：或</li><li>NOT：非</li><li>()：共同定义</li></ul><p>-query 检索词还可以使用正则表达式：</p><ul><li>“*”星号表示任意个匹配的字符</li></ul><p><strong>-query 字符串定义</strong></p><p>建议用 ‘…’ 定义 -query 值，里面的各个关键词用 AND/OR 等建立逻辑关系。关键词组添加 filter 时用 “…” 定义。如：</p><p>-query ‘“salmonella paratyphi A”[ORGN] AND latest[filter] AND “complete genome[filter]”‘</p><h3 id="4-具体示例"><a href="#4-具体示例" class="headerlink" title="4. 具体示例"></a>4. 具体示例</h3><p>下面我们就用几个简单的例子来尝试 edirect 的功能。结合 Linux 其他命令行工具，可以极大的提升我们在命令行界面下检索和抓取 NCBI 数据库的效率。</p><p><strong>查看2014~2016年发表的霍乱弧菌CTX相关文献的摘要</strong></p><p>用关键词 vibrio cholerae CTX 检索 pubmed 数据库，将搜索到的文献的摘要保存到文件中，方便查看。由于是文本格式的内容，方便后期进一步处理，比如提取单词进行词频计算，用翻译API将摘要进行自动翻译等等。</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 示例为了减少命中数据，设置了发布日期的 -mindate 和 maxdata</span><br>$ esearch -db pubmed -mindate <span class="hljs-number">2014</span> -maxdate <span class="hljs-number">2016</span> -datetype PDAT \<br>&gt; -query <span class="hljs-string">&quot;vibrio cholerae CTX&quot;</span> | efetch -format <span class="hljs-keyword">abstract</span> &gt; <span class="hljs-keyword">abstract</span>.txt<br><br><span class="hljs-meta"># 日期设置的另一种写法</span><br>$ esearch -db pubmed -query <span class="hljs-string">&quot;vibrio cholerae CTX AND \</span><br><span class="hljs-string">&gt; (2014[pdat]:2016[pdat])&quot;</span> | efetch -format <span class="hljs-keyword">abstract</span> &gt; <span class="hljs-keyword">abstract</span>.txt<br></code></pre></div></td></tr></table></figure><p><strong>查看文章作者</strong></p><p>常常会对某一类文章，或者某一个期刊的文章作者进行关注，这里根据检索关键词，格式化输出文章的ID和作者列表。这也是 xtract 最常见的应用之一。</p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl"># 检索关键词，以最近300天为范围<br>$ esearch -db pubmed -query &quot;listeria monocytogenes AND prfA&quot; -days 300 | \<br><span class="hljs-meta">&gt;</span> <span class="javascript">efetch -format xml | xtract -pattern PubmedArticle \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">-element MedlineCitation/PMID -block Author -sep <span class="hljs-string">&quot; &quot;</span> \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">-element LastName,Initials</span><br></code></pre></div></td></tr></table></figure><p><strong>查看近300天以来发表的文章中，作者中有叫Jim的所有文章题目</strong></p><p>利用 pubmed 数据库的 filter [FULL], 查询所有作者列表里有叫Jim的文章标题，这里采用 medline 格式输出，如果要进一步做格式化可以用xml格式再用xtract重新排版打印。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> pubmed -days 300 -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;Jim[FULL]&quot;</span> | efetch -<span class="hljs-keyword">format</span> medline | \<br>&gt; grep TI | awk -F&#x27;- &#x27; &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$2&#125;</span>&#x27;<br></code></pre></div></td></tr></table></figure><p><strong>查看2016年CDC发布的所有用miseq测序的沙门菌文库制备方法</strong></p><p>想要了解 CDC 开展的 miseq 沙门菌测序时采用的文库构建方法，可以利用 sra 数据库的 runinfo信息输出获得。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">$ esearch -db sra -query <span class="hljs-string">&quot;salmonella[OGRN] miseq[PLAT] EDBL-CDC&quot;</span> \<br>&gt; -mindate <span class="hljs-number">2016</span><span class="hljs-regexp">/01/</span><span class="hljs-number">01</span> -maxdate <span class="hljs-number">2016</span><span class="hljs-regexp">/12/</span><span class="hljs-number">31</span> -datetype PDAT | \<br>&gt; efetch -format runinfo | cut -d <span class="hljs-string">&#x27;,&#x27;</span> -f <span class="hljs-number">12</span> &gt; library.txt<br></code></pre></div></td></tr></table></figure><p><strong>绘制单增李斯特菌hlyA蛋白质进化树图</strong></p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">$ esearch -<span class="hljs-built_in">db</span> protein -query <span class="hljs-string">&quot;listeriolysin hlyA NOT partial&quot;</span> |<br>&gt; efetch -format fasta &gt; hlyA.fasta<br>$ mafft hlyA.fasta &gt; hlyA.mafft.fasta<br>$ raxml -m GTRGAMMA -p <span class="hljs-number">12345</span> -s hlyA.mafft.fasta -f a -x <span class="hljs-number">12345</span> -<span class="hljs-built_in">N</span> <span class="hljs-number">100</span> -<span class="hljs-built_in">T</span> <span class="hljs-number">40</span> -<span class="hljs-built_in">n</span> hlyA<br></code></pre></div></td></tr></table></figure><p><strong>对10年内发表的检索文献的作者排序</strong></p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl">$ esearch -db pubmed -days 3650 -datetype PDAT -query &quot;hlyA&quot; | \<br><span class="hljs-meta">&gt;</span> <span class="javascript">efetch -format xml | \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">xtract -pattern Author -element LastName | \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">sort-uniq-count-rank</span><br></code></pre></div></td></tr></table></figure><p><strong>查看 taxonomy</strong></p><p>taxonomy 数据库的 filter [NXLV] 可以直接输出species级别</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata"># 获得 taxonomy 数据库里 <span class="hljs-keyword">lis</span> 或 sal 开头的分类名<br>$ esearch -<span class="hljs-keyword">db</span> taxonomy -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;lis* OR sal*&quot;</span> | efetch -<span class="hljs-keyword">db</span> taxonomy -<span class="hljs-keyword">format</span> txt<br><br># 获得 species 级的所有沙门菌<br>$ esearch -<span class="hljs-keyword">db</span> taxonomy -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;Salmonella[NXLV]&quot;</span> | efetch -<span class="hljs-keyword">db</span> taxonomy -<span class="hljs-keyword">format</span> txt<br></code></pre></div></td></tr></table></figure><p><strong>下载所有甲型副伤寒沙门菌基因组序列</strong></p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> nuccore -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;Salmonella[porgn:__txid54388] complete genome&quot;</span> | \<br>&gt; efetch -<span class="hljs-keyword">db</span> nuccore -<span class="hljs-keyword">format</span> fasta &gt; SPA.fasta<br></code></pre></div></td></tr></table></figure><p><strong>获取SRA数据库中目的数据的测序样本地理信息</strong></p><figure class="highlight node-repl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs node-repl">$ esearch -db sra -query &quot;China&quot; -days 1 | elink -target biosample | \<br><span class="hljs-meta">&gt;</span> <span class="javascript">efetch -format docsum | xtract -pattern DocumentSummary -element Accession \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">-block Attribute -<span class="hljs-keyword">if</span> Attribute@attribute_nam \</span><br><span class="hljs-meta">&gt;</span> <span class="javascript">-equals lat_lon -element Attribute</span><br></code></pre></div></td></tr></table></figure><p><strong>获得某个bioproject下的所有sra run的信息</strong></p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs coq">$ eserach -db bioproject -query <span class="hljs-string">&quot;PRJNA209644&quot;</span> | <span class="hljs-type">elink</span> -target sra | <span class="hljs-type">\</span><br><span class="hljs-type">&gt; efetch</span> -format docsum | <span class="hljs-type">xtract</span> -<span class="hljs-built_in">pattern</span> DocumentSummary -ACC @acc \<br>&gt; -block DocumentSummary -element <span class="hljs-string">&quot;&amp;ACC&quot;</span><br></code></pre></div></td></tr></table></figure><p><strong>下载assembly数据库的refseq序列</strong></p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> assembly -<span class="hljs-keyword">query</span> <span class="hljs-string">&quot;Salmonella enterica[ORGN] AND 2010[GRLS]&quot;</span> | \<br>&gt; efetch -<span class="hljs-keyword">format</span> docsum | xtract -pattern DocumentSummary \<br>&gt; -element FtpPath_RefSeq | awk -F<span class="hljs-string">&quot;/&quot;</span> &#x27;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$0</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$NF</span><span class="hljs-string">&quot;_genomic.fna.gz&quot;</span>&#125;&#x27; | \<br>&gt; xargs wget<br></code></pre></div></td></tr></table></figure><p><strong>查看assembly meta信息</strong></p><p>NCBI 的 Assembly 数据库包含了 RefSeq 数据库的基因组数据，选择相应的物种可以获得该物种的基因组拼接序列，有完成图也有非完成图。</p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livescript">$ esearch -db assembly -query <span class="hljs-string">&#x27;&quot;salmonella paratyphi A&quot;[ORGN] AND latest[FILT]&#x27;</span> | <span class="hljs-string">\</span><br>&gt; efetch -format docsum | xtract -pattern Meta -block Stats <span class="hljs-string">\</span><br>&gt; -tab <span class="hljs-string">&#x27;\n&#x27;</span> -sep <span class="hljs-string">&#x27;\t&#x27;</span> -element Stat@category Stat | sort -ur &gt; meta.txt<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><br>df = pd.read_table(<span class="hljs-string">&quot;meta.txt&quot;</span>)<br>sns.jointplot(x=<span class="hljs-string">&quot;contig_count&quot;</span>, y=<span class="hljs-string">&quot;scaffold_n50&quot;</span>, data=df)<br></code></pre></div></td></tr></table></figure><p><strong>获取SRA菌株信息</strong></p><p>对某个物种开展进化研究时，我们往往会竟可能收集公共数据库中的菌株背景信息。下面这个例子搜索某个 bioproject，然后获得该研究的所有测序数据的 sra 背景信息。通过 &lt;SAMPLE_ATTRIBUTE&gt; 元素下的各个 TAG 和 VALUE 来提取所需信息。</p><figure class="highlight stata"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stata">$ esearch -<span class="hljs-keyword">db</span> bioproject -<span class="hljs-keyword">query</span> 273159 | elink -target sra | \<br>&gt; efetch -<span class="hljs-keyword">format</span> xml | xtract -pattern EXPERIMENT_PACKAGE -<span class="hljs-keyword">tab</span> <span class="hljs-string">&quot;,&quot;</span> \<br>&gt; -element <span class="hljs-keyword">RUN</span>@accession -block SAMPLE_ATTRIBUTE -<span class="hljs-keyword">tab</span> <span class="hljs-string">&quot;\t&quot;</span> -sep <span class="hljs-string">&quot;:&quot;</span> \<br>&gt; -element TAG,VALUE &gt; <span class="hljs-keyword">sample</span>.txt<br>$ head <span class="hljs-keyword">sample</span>.txt<br></code></pre></div></td></tr></table></figure><p>这样输出的问题在于各个测序数据的 SAMPLE_ATTRIBUTE 的 TAG 顺序是乱序的，每个 SRR 输出的顺序不同导致各个字段要重新排序，比较麻烦。如果我们只需要其中一个字段，可以用 -if *** -eqauls *** 来过滤。比如下面代码我们输出菌株名称：</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">$ esearch -db bioproject -query <span class="hljs-number">273159</span> | elink -target sra | \<br>&gt; efetch -format <span class="hljs-keyword">xml</span> <span class="hljs-title">| xtract</span> -pattern EXPERIMENT_PACKAGE -tab <span class="hljs-string">&quot;,&quot;</span> \<br>&gt; -element RUN@accession -block SAMPLE_ATTRIBUTE -if <span class="hljs-keyword">TAG</span> <span class="hljs-title">-equals</span> <span class="hljs-string">&quot;strain&quot;</span> \<br>&gt; -element VALUE | sort &gt; strain-name.csv<br></code></pre></div></td></tr></table></figure><p><code>-if</code>在一行输出中不能反复使用，如果要同时对多个样品信息字段分别输出，我们采用变通的方法，先把 xml 数据保存到本地，然后循环分别输出各个所需内容，用 sort 排序，再用 paste 合并。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh"><span class="hljs-comment"># 分别输出 csv 格式的数据</span><br>$ for i <span class="hljs-keyword">in</span> serovar strain isolate_name_alias collection_date isolation_source; \<br>&gt; do xtract -input bioproject.<span class="hljs-keyword">xml</span> <span class="hljs-title">-pattern</span> EXPERIMENT_PACKAGE -tab <span class="hljs-string">&quot;,&quot;</span> \<br>&gt; -element RUN@accession -block SAMPLE_ATTRIBUTE -if <span class="hljs-keyword">TAG</span> <span class="hljs-title">-equals</span> $i -element \<br>&gt; VALUE | sort &gt; $i; done<br><span class="hljs-comment"># 合并 csv</span><br>$ paste -d , strain serovar isolate_name_alias collection_date &gt; sample.csv<br></code></pre></div></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><hr><ol><li><a href="http://www.ncbi.nlm.nih.gov/books/NBK179288">Entrez Direct: E-utilities on the UNIX Command Line</a> <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fnref:1">↩</a></li><li><a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">Unix Pipeline Wikipedia</a> <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fnref:4">↩</a></li><li><a href="https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html">Medline Element Description</a> <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fnref:2">↩</a></li><li><a href="http://www.w3school.com.cn/xml/">XML</a> <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/03_entrez/#fnref:3">↩</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>下载基因组数据</title>
    <link href="/2021/09/12/xiazai/"/>
    <url>/2021/09/12/xiazai/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行下载公共数据库基因组数据"><a href="#命令行下载公共数据库基因组数据" class="headerlink" title="命令行下载公共数据库基因组数据"></a>命令行下载公共数据库基因组数据</h1><p><a href="mailto:indexofire@gmail.com">Mark Renton</a> 更新于: 2020-09-14</p><hr><ul><li>SRA</li><li>Assembly</li></ul><h2 id="SRA-数据下载"><a href="#SRA-数据下载" class="headerlink" title="SRA 数据下载"></a>SRA 数据下载</h2><p>这些公共数据库的数据可以通过不同方式下载，如https、ftp，或者使用aspera这个工具进行高速下载。</p><h3 id="1-2-1-用-Aspera-工具下载-SRA"><a href="#1-2-1-用-Aspera-工具下载-SRA" class="headerlink" title="1.2.1 用 Aspera 工具下载 SRA"></a>1.2.1 用 Aspera 工具下载 SRA</h3><p><strong>Aspera 介绍</strong></p><p><a href="http://asperasoft.com/">Aspera</a> 是 IBM 开发的加速在线数据传输的一组服务器端与客户端的应用程序。<a href="http://asperasoft.com/">Aspera</a> 的各个工具可以在 <a href="http://downloads.asperasoft.com/downloads">官方网站</a> 下载获得。</p><p>在服务器上我们只需要命令行工具 <code>ascp</code> 即可。而对于桌面用户来说，可以选择安装 <a href="http://downloads.asperasoft.com/en/downloads/8?list">Aspera Connent</a> 等工具。由于 Ascp Client 工具需要登录后才能下载，因此选择了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 来安装。它是 <a href="http://asperasoft.com/">Aspera</a> 用于浏览器下载的高效插件，其内嵌了 <code>ascp</code> 命令也可以直接在服务器上运行。安装了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 的带图形界面的客户端，浏览器会在有 Connect, Faspex 或者 Shares 页面的链接处添加 ascp 下载快捷按钮。</p><p><strong>安装 aspera connect</strong></p><p><a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 下载解压缩后，可以看到一个 .sh 文件，执行后运行后会安装到当前用户 $HOME.aspera/connect 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载并解压缩程序</span><br>wget http://download.asperasoft.com/download/sw/connect/3.6.1/aspera-connect-3.6.1.110647-linux-64.tar.gz<br>tar zxf asper-connect-3.6.1.110647-linux.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装到本地用户</span><br>./aspera-connect-3.6.1.110647-linux-64.sh<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加用户执行路径</span><br>echo &#x27;PATH=&quot;$PATH:$HOME/.aspera/connect/bin/&quot;&#x27; &gt;&gt; ~/.bashrc<br></code></pre></div></td></tr></table></figure><p>对于喜欢使用客户端的桌面用户，也可以使用 <a href="http://downloads.asperasoft.com/en/downloads/2">Aspera Desktop Client</a> 客户端程序来下载数据。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sed &#x27;s/^INSTALL_DIR/INSTALL_DIR=~/envs/srst2/src/ascp/connect/&#x27; aspera-connect-3.6.1.110647-linux-64.sh &gt; install.sh<br>./install.sh<br></code></pre></div></td></tr></table></figure><p><strong>下载 SRA 数据</strong></p><p>注意新版的<code>ascp</code>用<code>.openssh</code>作为密钥文件而不是原来的<code>.putty</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ascp 下载 SRA 数据</span><br>ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh \<br><span class="hljs-meta">&gt;</span><span class="bash"> --user=anonftp --host=ftp.ncbi.nlm.nih.gov --mode=recv -l 100m -pQTk1 \</span><br><span class="bash">&gt; /sra/sra-instant/reads/ByRun/sra/SRR/SRR955/SRR955386/SRR955386.sra .</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加 <span class="hljs-built_in">alias</span> 简化操作</span><br>echo &quot;alias ascp=&#x27;ascp -i ~/.ascpera/connect/etc/asperaweb_id_dsa.openssh --user=dbtest --host=sra-download.ncbi.nlm.nih.gov --mode=recv -l 100m -pQTk1&#x27;&quot; &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 测试下载</span><br>ascp /data/sracloud/srapub/ERR579922 ./ERR578822.sra<br></code></pre></div></td></tr></table></figure><h3 id="1-2-2-ftp-下载"><a href="#1-2-2-ftp-下载" class="headerlink" title="1.2.2 ftp 下载"></a>1.2.2 ftp 下载</h3><p>从国内公网访问 NCBI FTP 服务器往往是非常缓慢的，而 <a href="http://www.ebi.ac.uk/">EBI</a> 就不同了，有些地方的速度很快，下载甚至可以超过 <a href="http://asperasoft.com/">Aspera</a>。由于 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 和 <a href="http://www.ebi.ac.uk/">EBI</a> 共享数据库，因此对于国内 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 下载缓慢或者无法用 ascp 的用户，可以考虑在 <a href="http://www.ebi.ac.uk/">EBI</a> 下载数据。</p><h2 id="2-2-sratoolkit"><a href="#2-2-sratoolkit" class="headerlink" title="2.2 sratoolkit"></a>2.2 sratoolkit</h2><p><a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 开发了 <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/02_get-data/(https://github.com/ncbi/sra-tools)">sratoolkit</a> 工具来帮助处理 SRA 数据，正确配置后可以很方便的下载 SRA 数据。</p><h3 id="2-2-1-安装sratoolkit"><a href="#2-2-1-安装sratoolkit" class="headerlink" title="2.2.1 安装sratoolkit"></a>2.2.1 安装sratoolkit</h3><p>可以直接从 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 上下载。最新的源码可以在 <a href="https://github.com/ncbi/sra-tools">Github</a> 获得。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> download from NCBI</span><br>cd /tmp<br>wget http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.5.6/sratoolkit.2.5.6-ubuntu64.tar.gz<br>tar zxf sratoolkit.2.5.6-ubuntu64.tar.gz -C ~/app<br></code></pre></div></td></tr></table></figure><h3 id="2-2-2-下载-SRA-格式文件"><a href="#2-2-2-下载-SRA-格式文件" class="headerlink" title="2.2.2 下载 SRA 格式文件"></a>2.2.2 下载 SRA 格式文件</h3><p>如果你安装并设置了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a>，那么<code>prefetch</code>会优先使用<code>ascp</code>方式来下载，如果没有安装或则<code>ascp</code>下载失败，则切换成 HTTP 方式下载 sra 数据。另外<code>fastq-dump</code>命令也能从远端直接下载数据，加上<code>-X 1</code>参数，会预先下载最前的5个 reads，加上<code>-Z</code>参数，则会将这些 reads 打印到终端输出。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载 SRR955386.sra 到 你安装 sratoolkit 时配置的 public 目录中，默认是 ~/ncbi/public/sra</span><br>prefetch -v SRR955386<br><span class="hljs-meta">#</span><span class="bash"> 下载 SRR955386.sra 到 你安装 sratoolkit 时配置的 public 目录中，默认是 ~/ncbi/public/sra，并且在终端输出5行 reads 数据。</span><br>fastq-dump -X 5 -Z SRR955386<br></code></pre></div></td></tr></table></figure><h3 id="2-2-3-并转换成-fastq-格式"><a href="#2-2-3-并转换成-fastq-格式" class="headerlink" title="2.2.3 并转换成 .fastq 格式"></a>2.2.3 并转换成 .fastq 格式</h3><p>获得了 .sra 文件后，需要将其转换成 .fastq 格式的文件，用<code>fastq-dump</code>可以很方便的实现。转换之前要注意的是该 run 的 metadata 里，测序类型是 SE 还是 PE 的。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将 sra 文件移动到 ~/data 目录中</span><br>mv ~/.ncbi/public/sra/SRR955386.sra ~/data<br><span class="hljs-meta">#</span><span class="bash"> 如果是 SE 测序数据，直接运行以下命令</span><br>fastq-dump SRR955386.sra<br><span class="hljs-meta">#</span><span class="bash"> 如果是 PE 测序数据，则要添加参数：--split-files</span><br>fastq-dump --split-files SRR955386.sra<br></code></pre></div></td></tr></table></figure><h3 id="2-2-4-SE-PE-文件判断"><a href="#2-2-4-SE-PE-文件判断" class="headerlink" title="2.2.4 SE/PE 文件判断"></a>2.2.4 SE/PE 文件判断</h3><p>正常的 sra 文件的 metadata 应该包含测序采用的是 SE 还是 PE 的方式。但如果你不知道所下载的到底是 SE 还是 PE 格式的文件可以用<code>fastq-dump -X 1 --split-spot</code>的方法来判断。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> it<span class="hljs-string">&#x27;s SE if nreads=1, and PE when nreads=2，统计整个文件，因此速度比较慢</span></span><br>sra-stat -xs SRR955386.sra | grep &quot;nreads&quot;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 如果输出是4，那么就是SE，如果是8,则是PE</span></span><br>fastq-dump -X 1 --split-spot -Z SRR955386.sra | wc -l<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 或者加上参数让 fastq-dump 自己判断</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 当 sra 文件是 SE 测序时，fastq-dump只能dump出1个 *_1.fastq 文件</span></span><br>fastq-dump --split-files ERR493452.sra<br>mv ERR493452_1.fastq ERR493452.fastq<br></code></pre></div></td></tr></table></figure><p>当需要判断批量下载的 sra 文件时，区分那些是 PE 的那些是 SE 的文件，可以用以下脚本：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_SRA_type</span>(<span class="hljs-params">fn</span>):</span><br>    fn = os.path.abspath(fn);<br>    <span class="hljs-keyword">try</span>:<br>        contents = subprocess.check_output([<span class="hljs-string">&quot;fastq-dump&quot;</span>, <span class="hljs-string">&quot;-X&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;-Z&quot;</span>, <span class="hljs-string">&quot;--split-spot&quot;</span>, fn]);<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError, e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Error running fastq-dump on&quot;</span>, fn);<br>    <span class="hljs-comment"># -X 1 will output 4 lines if SE, and 8 lines if PE</span><br>    <span class="hljs-keyword">if</span>(contents.count(<span class="hljs-string">&quot;\n&quot;</span>) == <span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>    <span class="hljs-keyword">elif</span>(contents.count(<span class="hljs-string">&quot;\n&quot;</span>) == <span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Unexpected output from fastq-dump on &quot;</span>, filename);<br></code></pre></div></td></tr></table></figure><h4 id="2-2-5-利用entrez批量下载"><a href="#2-2-5-利用entrez批量下载" class="headerlink" title="2.2.5 利用entrez批量下载"></a>2.2.5 利用entrez批量下载</h4><p>如果想下载一个完整的 project 数据，可以利用 entrez-direct 工具。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 希望下载研究PRJNA40075项目的数据</span><br>esearch -db sra -query PRJNA40075  | efetch --format runinfo | cut -d &#x27;,&#x27; -f 1 | grep SRR | xargs fastq-dump --split-files<br></code></pre></div></td></tr></table></figure><p>如果想下载不同 research 的数据，可以自己建立一个 accession number list 的文件，比如利用 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 的 entrez 网页界面，导出所需要的数据 accession number，然后利用 <code>ascp</code> 下载。不过建议<code>ascp</code>下载不要太狠心，否则容易被 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 给封掉。</p><h2 id="3-Assembly-数据库"><a href="#3-Assembly-数据库" class="headerlink" title="3. Assembly 数据库"></a>3. Assembly 数据库</h2><p>如果不需要研究 reads 数据，而是只想研究拼接的基因组数据，可以从 NCBI assembly 数据库去寻找数据，并通过 ascp/ftp 等工具下载。</p><h2 id="4-上传数据"><a href="#4-上传数据" class="headerlink" title="4. 上传数据"></a>4. 上传数据</h2><p>SRA 上传测序结果可以参照 <a href="http://www.ncbi.nlm.nih.gov/books/NBK47529/">NCBI文档</a> 来实现。一般上传数据到NCBI SRA的过程需要6步：</p><ol><li>Create a BioProject for this research</li><li>Create a BioSample submission for your biological sample(s)</li><li>Gather Sequence Data Files</li><li>Enter Metadata on SRA website 4.1 Create SRA submission 4.2 Create Experiment(s) and link to BioProject and BioSample 4.3 Create Run(s)</li><li>Transfer Data files to SRA</li><li>Update Submission with PubMed links, Release Date, or Metadata Changes</li></ol><p>需要注意的一点是，上传的过程中很多地方一旦保存或提交就不可以修改，尤其是各处的Alias。但是，可以联系NCBI的工作人员修改内容。NCBI的工作效率是很高的，一般不超过48小时，就可以得到确认，并拿到登录号。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://www.ncbi.nlm.nih.gov/books/NBK47529/">NCBI上传数据文档</a></li><li>熊筱晶, NCBI高通量测序数据库SRA介绍, 生命的化学[J], 2010:6, 959-963.</li><li><a href="http://blog.sciencenet.cn/blog-656335-908140.html">http://blog.sciencenet.cn/blog-656335-908140.html</a></li><li><a href="https://www.biostars.org/p/139422/">https://www.biostars.org/p/139422/</a></li><li><a href="https://www.youtube.com/watch?v=NSIkUHKRPpo">https://www.youtube.com/watch?v=NSIkUHKRPpo</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基因组公共数据库</title>
    <link href="/2021/09/12/ku/"/>
    <url>/2021/09/12/ku/</url>
    
    <content type="html"><![CDATA[<h1 id="基因组公共数据库"><a href="#基因组公共数据库" class="headerlink" title="基因组公共数据库"></a>基因组公共数据库</h1><p>来源于：<a href="mailto:indexofire@gmail.com">Mark Renton</a> 更新于: 2020-09-17</p><hr><p>内容简介</p><p>测序的数据如原始 reads 数据我们可以上传到 NCBI 或 EBI 的公共数据库，发表的文章中可以使用。此外公共数据库中的数据也可以为我们的研究提供帮助。本节我们就来了解一下如何上传和下载基因组测序数据。首先让我们来了解一下网络上的测序公共数据库：</p><p><strong>常见的高通量测序数据的公共数据库：</strong></p><ul><li><a href="http://www.ncbi.nlm.nih.gov/sra">SRA</a> 短序列数据库：由 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 负责维护</li><li><a href="http://www.ebi.ac.uk/ena">ENA</a> 欧洲核酸数据库：由 <a href="http://www.ebi.ac.uk/">EBI</a> 负责维护</li><li><a href="http://gsa.big.ac.cn/">GSA</a> 中国组学数据库：由<a href="http://www.big.ac.cn/">中科院北京基因研究所</a>负责维护</li></ul><p><a href="http://www.ncbi.nlm.nih.gov/sra">SRA</a> 是 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 为了应对越来越多的高通量测序数据而在 2007 年底推出的测序数据库，用于存储、显示、提取和分析高通量测序数据。而 <a href="http://www.ebi.ac.uk/ena">ENA</a> 则是由 <a href="http://www.ebi.ac.uk/">EBI</a> 负责维护的功能类似的数据库，同时作为 <a href="http://www.ensembl.org/">Ensembl</a>、<a href="http://www.uniprot.org/">UniProt</a> 和 <a href="http://www.ebi.ac.uk/arrayexpress">ArrayExpress</a> 等服务的底层基础。2者在主要功能方面非常类似，同时数据互通。</p><hr><h2 id="1-SRA-数据库"><a href="#1-SRA-数据库" class="headerlink" title="1.SRA 数据库"></a>1.SRA 数据库</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p><a href="http://www.ncbi.nlm.nih.gov/sra">SRA</a> 是 Sequence Read Archive 的首字母缩写。<a href="http://www.ncbi.nlm.nih.gov/sra">SRA</a> 与 Trace 最大的区别是将实验数据与 metadata（元数据）分离。metadata 是指与测序实验及其实验样品相关的数据，如实验目的、实验设计、测序平台、样本数据(物种，菌株，个体表型等)。metadata可以分为以下几类：</p><ul><li>Study：accession number 以 DRP，SRP，ERP 开头，表示的是一个特定目的的研究课题，可以包含多个研究机构和研究类型等。study 包含了项目的所有 metadata，并有一个 NCBI 和 EBI 共同承认的项目编号（universal project id），一个 study 可以包含多个实验（experiment）。</li><li>Sample：accession number以 DRS，SRS，ERS 开头，表示的是样品信息。样本信息可以包括物种信息、菌株(品系) 信息、家系信息、表型数据、临床数据,组织类型等。可以通过<a href="http://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=search_obj">Trace</a> 来查询。</li><li>Experiment：accession number 以 DRX，SRX，ERX 开头。表示一个实验记载的实验设计（Design），实验平台（Platform）和结果处理（processing）三部分信息。实验是 <a href="http://www.ncbi.nlm.nih.gov/sra">SRA</a> 数据库的最基本单元，一个实验信息可以同时包含多个结果集（run）。</li><li>Run：accession number 以DRR，SRR，ERR 开头。一个 Run 包括测序序列及质量数据。</li><li>Submission：一个 study 的数据，可以分多次递交至 SRA 数据库。比如在一个项目启动前期，就可以把 study，experiment 的数据递交上去，随着项目的进展，逐批递交 run 数据。study 等同于项目，submission 等同于批次的概念。</li></ul><h3 id="1-2-数据下载"><a href="#1-2-数据下载" class="headerlink" title="1.2 数据下载"></a>1.2 数据下载</h3><p>这些公共数据库的数据可以通过不同方式下载，如https、ftp，或者使用aspera这个工具进行高速下载。</p><h4 id="1-2-1-用-Aspera-工具下载-SRA"><a href="#1-2-1-用-Aspera-工具下载-SRA" class="headerlink" title="1.2.1 用 Aspera 工具下载 SRA"></a>1.2.1 用 Aspera 工具下载 SRA</h4><p><a href="http://asperasoft.com/">Aspera</a> 是 IBM 开发的加速在线数据传输的一组服务器端与客户端的应用程序。<a href="http://asperasoft.com/">Aspera</a> 的各个工具可以在 <a href="http://downloads.asperasoft.com/downloads">官方网站</a> 下载获得。</p><p>在服务器上我们只需要命令行工具 <code>ascp</code> 即可。而对于桌面用户来说，可以选择安装 <a href="http://downloads.asperasoft.com/en/downloads/8?list">Aspera Connent</a> 等工具。由于 Ascp Client 工具需要登录后才能下载，因此选择了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 来安装。它是 <a href="http://asperasoft.com/">Aspera</a> 用于浏览器下载的高效插件，其内嵌了 <code>ascp</code> 命令也可以直接在服务器上运行。安装了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 的带图形界面的客户端，浏览器会在有 Connect, Faspex 或者 Shares 页面的链接处添加 ascp 下载快捷按钮。</p><p><strong>安装 aspera connect</strong></p><p><a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a> 下载解压缩后，可以看到一个 .sh 文件，执行后运行后会安装到当前用户 $HOME.aspera/connect 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载并解压缩程序</span><br><span class="hljs-meta">$</span><span class="bash"> wget http://download.asperasoft.com/download/sw/connect/3.6.1/aspera-connect-3.6.1.110647-linux-64.tar.gz</span><br><span class="hljs-meta">$</span><span class="bash"> tar zxf asper-connect-3.6.1.110647-linux.tar.gz</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 安装到本地用户</span><br><span class="hljs-meta">$</span><span class="bash"> ./aspera-connect-3.6.1.110647-linux-64.sh</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加用户执行路径</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:$HOME/.aspera/connect/bin/&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></code></pre></div></td></tr></table></figure><p><strong>下载 SRA 数据</strong></p><p>注意新版的<code>ascp</code>用<code>.openssh</code>作为密钥文件而不是原来的<code>.putty</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ascp 下载 SRA 数据</span><br><span class="hljs-meta">$</span><span class="bash"> ascp -i ~/.aspera/connect/etc/asperaweb_id_dsa.openssh \</span><br><span class="bash">&gt; --user=anonftp --host=ftp.ncbi.nlm.nih.gov --mode=recv -l 100m -pQTk1 \</span><br><span class="bash">&gt; /sra/sra-instant/reads/ByRun/sra/SRR/SRR955/SRR955386/SRR955386.sra .</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 添加 <span class="hljs-built_in">alias</span> 简化操作</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;alias ascp=&#x27;ascp -i ~/.ascpera/connect/etc/asperaweb_id_dsa.openssh --user=dbtest --host=sra-download.ncbi.nlm.nih.gov --mode=recv -l 100m -pQTk1&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">source</span> ~/.bashrc</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 测试下载</span><br><span class="hljs-meta">$</span><span class="bash"> ascp /data/sracloud/srapub/ERR579922 ./ERR578822.sra</span><br></code></pre></div></td></tr></table></figure><h4 id="1-2-2-ftp-下载"><a href="#1-2-2-ftp-下载" class="headerlink" title="1.2.2 ftp 下载"></a>1.2.2 ftp 下载</h4><p>从国内公网访问 NCBI FTP 服务器往往是非常缓慢的，而 <a href="http://www.ebi.ac.uk/">EBI</a> 就不同了，有些地方的速度很快，下载甚至可以超过 <a href="http://asperasoft.com/">Aspera</a>。由于 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 和 <a href="http://www.ebi.ac.uk/">EBI</a> 共享数据库，因此对于国内 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 下载缓慢或者无法用 ascp 的用户，可以考虑在 <a href="http://www.ebi.ac.uk/">EBI</a> 下载数据。</p><h3 id="2-2-sratoolkit"><a href="#2-2-sratoolkit" class="headerlink" title="2.2 sratoolkit"></a>2.2 sratoolkit</h3><p><a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 开发了 <a href="https://indexofire.github.io/pathongs/book/C01_Common-Utility/01_database/(https://github.com/ncbi/sra-tools)">sratoolkit</a> 工具来帮助处理 SRA 数据，正确配置后可以很方便的下载 SRA 数据。</p><h4 id="2-2-1-安装sratoolkit"><a href="#2-2-1-安装sratoolkit" class="headerlink" title="2.2.1 安装sratoolkit"></a>2.2.1 安装sratoolkit</h4><p>可以直接从 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 上下载。最新的源码可以在 <a href="https://github.com/ncbi/sra-tools">Github</a> 获得。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> download from NCBI</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /tmp</span><br><span class="hljs-meta">$</span><span class="bash"> wget http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.5.6/sratoolkit.2.5.6-ubuntu64.tar.gz</span><br><span class="hljs-meta">$</span><span class="bash"> tar zxf sratoolkit.2.5.6-ubuntu64.tar.gz -C ~/app</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-2-下载-SRA-格式文件"><a href="#2-2-2-下载-SRA-格式文件" class="headerlink" title="2.2.2 下载 SRA 格式文件"></a>2.2.2 下载 SRA 格式文件</h4><p>如果你安装并设置了 <a href="http://download.asperasoft.com/download/docs/connect/3.6.1/user_linux/webhelp/index.html#dita/introduction.html">Aspera Connect</a>，那么<code>prefetch</code>会优先使用<code>ascp</code>方式来下载，如果没有安装或则<code>ascp</code>下载失败，则切换成 HTTP 方式下载 sra 数据。另外<code>fastq-dump</code>命令也能从远端直接下载数据，加上<code>-X 1</code>参数，会预先下载最前的5个 reads，加上<code>-Z</code>参数，则会将这些 reads 打印到终端输出。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载 SRR955386.sra 到 你安装 sratoolkit 时配置的 public 目录中，默认是 ~/ncbi/public/sra</span><br><span class="hljs-meta">$</span><span class="bash"> prefetch -v SRR955386</span><br><span class="hljs-meta">#</span><span class="bash"> 下载 SRR955386.sra 到 你安装 sratoolkit 时配置的 public 目录中，默认是 ~/ncbi/public/sra，并且在终端输出5行 reads 数据。</span><br><span class="hljs-meta">$</span><span class="bash"> fastq-dump -X 5 -Z SRR955386</span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-3-并转换成-fastq-格式"><a href="#2-2-3-并转换成-fastq-格式" class="headerlink" title="2.2.3 并转换成 .fastq 格式"></a>2.2.3 并转换成 .fastq 格式</h4><p>获得了 .sra 文件后，需要将其转换成 .fastq 格式的文件，用<code>fastq-dump</code>可以很方便的实现。转换之前要注意的是该 run 的 metadata 里，测序类型是 SE 还是 PE 的。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 将 sra 文件移动到 ~/data 目录中</span><br><span class="hljs-meta">$</span><span class="bash"> mv ~/.ncbi/public/sra/SRR955386.sra ~/data</span><br><span class="hljs-meta">#</span><span class="bash"> 如果是 SE 测序数据，直接运行以下命令</span><br><span class="hljs-meta">$</span><span class="bash"> fastq-dump SRR955386.sra</span><br><span class="hljs-meta">#</span><span class="bash"> 如果是 PE 测序数据，则要添加参数：--split-files</span><br><span class="hljs-meta">$</span><span class="bash"> fastq-dump --split-files SRR955386.sra</span><br></code></pre></div></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> it<span class="hljs-string">&#x27;s SE if nreads=1, and PE when nreads=2，统计整个文件，因此速度比较慢</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> sra-stat -xs SRR955386.sra | grep &quot;nreads&quot;</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 如果输出是4，那么就是SE，如果是8,则是PE</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> fastq-dump -X 1 --split-spot -Z SRR955386.sra | wc -l</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 或者加上参数让 fastq-dump 自己判断</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 当 sra 文件是 SE 测序时，fastq-dump只能dump出1个 *_1.fastq 文件</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> fastq-dump --split-files ERR493452.sra</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> mv ERR493452_1.fastq ERR493452.fastq</span></span><br></code></pre></div></td></tr></table></figure><h4 id="2-2-4-SE-PE-文件判断"><a href="#2-2-4-SE-PE-文件判断" class="headerlink" title="2.2.4 SE/PE 文件判断"></a>2.2.4 SE/PE 文件判断</h4><p>正常的 sra 文件的 metadata 应该包含测序采用的是 SE 还是 PE 的方式。但如果你不知道所下载的到底是 SE 还是 PE 格式的文件可以用<code>fastq-dump -X 1 --split-spot</code>的方法来判断。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> it<span class="hljs-string">&#x27;s SE if nreads=1, and PE when nreads=2，统计整个文件，因此速度比较慢</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> sra-stat -xs SRR955386.sra | grep &quot;nreads&quot;</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 如果输出是4，那么就是SE，如果是8,则是PE</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> fastq-dump -X 1 --split-spot -Z SRR955386.sra | wc -l</span></span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 或者加上参数让 fastq-dump 自己判断</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> 当 sra 文件是 SE 测序时，fastq-dump只能dump出1个 *_1.fastq 文件</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> fastq-dump --split-files ERR493452.sra</span></span><br><span class="hljs-meta">$</span><span class="bash"><span class="hljs-string"> mv ERR493452_1.fastq ERR493452.fastq</span></span><br></code></pre></div></td></tr></table></figure><p>当需要判断批量下载的 sra 文件时，区分那些是 PE 的那些是 SE 的文件，可以用以下脚本：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_SRA_type</span>(<span class="hljs-params">fn</span>):</span><br>    fn = os.path.abspath(fn);<br>    <span class="hljs-keyword">try</span>:<br>        contents = subprocess.check_output([<span class="hljs-string">&quot;fastq-dump&quot;</span>, <span class="hljs-string">&quot;-X&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;-Z&quot;</span>, <span class="hljs-string">&quot;--split-spot&quot;</span>, fn]);<br>    <span class="hljs-keyword">except</span> subprocess.CalledProcessError, e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Error running fastq-dump on&quot;</span>, fn);<br>    <span class="hljs-comment"># -X 1 will output 4 lines if SE, and 8 lines if PE</span><br>    <span class="hljs-keyword">if</span>(contents.count(<span class="hljs-string">&quot;\n&quot;</span>) == <span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>    <span class="hljs-keyword">elif</span>(contents.count(<span class="hljs-string">&quot;\n&quot;</span>) == <span class="hljs-number">8</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Unexpected output from fastq-dump on &quot;</span>, filename);<br></code></pre></div></td></tr></table></figure><h4 id="2-2-5-利用entrez批量下载"><a href="#2-2-5-利用entrez批量下载" class="headerlink" title="2.2.5 利用entrez批量下载"></a>2.2.5 利用entrez批量下载</h4><p>如果想下载一个完整的 project 数据，可以利用 entrezdirect 工具</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">~/tmp$</span><span class="bash"> wget ftp://ftp.ncbi.nlm.nih.gov/entrez/entrezdirect/edirect.tar.gz</span><br><span class="hljs-meta">~/tmp$</span><span class="bash"> tar zxvf edirect.tar.gz -C ~/app</span><br><span class="hljs-meta">~/tmp$</span><span class="bash"> sudo ln -s ~/app/edirect/* /usr/<span class="hljs-built_in">local</span>/sbin/</span><br><span class="hljs-meta">~/data$</span><span class="bash"> esearch -db sra -query PRJNA40075  | efetch --format runinfo | cut -d <span class="hljs-string">&#x27;,&#x27;</span> -f 1 | grep SRR | xargs fastq-dump --split-files</span><br></code></pre></div></td></tr></table></figure><p>如果想下载不同 research 的数据，可以自己建立一个 accession number list 的文件，比如利用 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 的 entrez 网页界面，导出所需要的数据 accession number，然后利用 <code>ascp</code> 下载。不过建议<code>ascp</code>下载不要太狠心，否则容易被 <a href="http://www.ncbi.nlm.nih.gov/">NCBI</a> 给封掉。</p><h2 id="3-Assembly-数据库"><a href="#3-Assembly-数据库" class="headerlink" title="3. Assembly 数据库"></a>3. Assembly 数据库</h2><p>如果不需要研究 reads 数据，而是只想研究拼接的基因组数据，可以从 NCBI assembly 数据库去寻找数据，并通过 ascp/ftp 等工具下载。</p><h2 id="4-上传数据"><a href="#4-上传数据" class="headerlink" title="4. 上传数据"></a>4. 上传数据</h2><p>SRA 上传测序结果可以参照 <a href="http://www.ncbi.nlm.nih.gov/books/NBK47529/">NCBI文档</a> 来实现。一般上传数据到NCBI SRA的过程需要6步：</p><ol><li>Create a BioProject for this research</li><li>Create a BioSample submission for your biological sample(s)</li><li>Gather Sequence Data Files</li><li>Enter Metadata on SRA website 4.1 Create SRA submission 4.2 Create Experiment(s) and link to BioProject and BioSample 4.3 Create Run(s)</li><li>Transfer Data files to SRA</li><li>Update Submission with PubMed links, Release Date, or Metadata Changes</li></ol><p>需要注意的一点是，上传的过程中很多地方一旦保存或提交就不可以修改，尤其是各处的Alias。但是，可以联系NCBI的工作人员修改内容。NCBI的工作效率是很高的，一般不超过48小时，就可以得到确认，并拿到登录号。</p><h2 id="BIG-中国科学院北京基因组所"><a href="#BIG-中国科学院北京基因组所" class="headerlink" title="BIG(中国科学院北京基因组所)"></a><a href="http://bigd.big.ac.cn/">BIG(中国科学院北京基因组所)</a></h2><p>几个数据库入口：</p><ul><li><a href="http://bigd.big.ac.cn/bioproject">Bioproject</a></li><li><a href="http://bigd.big.ac.cn/biosample">Biosample</a></li><li><a href="http://bigd.big.ac.cn/gsa">GSA</a></li></ul><p>一般可以通过FTP方式下载:w</p><h2 id="复制起点数据库"><a href="#复制起点数据库" class="headerlink" title="复制起点数据库"></a><a href="http://tubic.org/doric">复制起点数据库</a></h2><p>细菌、真菌和质粒的复制起始位点数据库</p><h2 id="质粒数据库"><a href="#质粒数据库" class="headerlink" title="质粒数据库"></a><a href="http://www.patlas.site/">质粒数据库</a></h2><h2 id="plsdb质粒数据库"><a href="#plsdb质粒数据库" class="headerlink" title="plsdb质粒数据库"></a><a href="http://ccb-microbes.cs.unisaarland.de/plsdb">plsdb质粒数据库</a></h2><h2 id="eggNOG"><a href="#eggNOG" class="headerlink" title="eggNOG"></a><a href="http://eggnog.embl.de/">eggNOG</a></h2><h2 id="GO"><a href="#GO" class="headerlink" title="GO"></a><a href="http://geneontology.org/">GO</a></h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://www.ncbi.nlm.nih.gov/books/NBK47529/">NCBI上传数据文档</a></li><li>熊筱晶, NCBI高通量测序数据库SRA介绍, 生命的化学[J], 2010:6, 959-963.</li><li><a href="http://blog.sciencenet.cn/blog-656335-908140.html">http://blog.sciencenet.cn/blog-656335-908140.html</a></li><li><a href="https://www.biostars.org/p/139422/">https://www.biostars.org/p/139422/</a></li><li><a href="https://www.youtube.com/watch?v=NSIkUHKRPpo">https://www.youtube.com/watch?v=NSIkUHKRPpo</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>服务器常见问题</title>
    <link href="/2021/09/12/fuwuqi/"/>
    <url>/2021/09/12/fuwuqi/</url>
    
    <content type="html"><![CDATA[<p>生信技能树共享</p><p><strong>关于IP地址和域名：</strong></p><p>此文档所用的 IP 和端口均为示例，<strong>实际 IP 和端口以邮件或群公告内容为准，所有 IP 地址都已经更换为域名</strong>  <strong>biotrainee.vip ，请采用域名登录</strong></p><p><strong>关于答疑：</strong></p><p>我们提供的是计算资源，理论上<strong>没有义务为大家答疑解决报错的</strong>，非服务器问题，要自己解决或者群里大家互相求助。</p><p><strong>关于服务器的算力资源使用：</strong></p><p>我们不做强制要求，服务器的可用资源总共是 <strong>96 线程 384G 内存。</strong>原则上每个人使用是不能超过服务器的 <strong>一半使用资源，即 48 线程192G内存</strong>。如果在使用超过一半资源的时候，没有引起其他人投诉，我们原则上不做过多干预（只有在处理器和内存资源都被占满的情况下，为了保证服务器的运行稳定性，才会强制kill任务）。另外如果是短时间内（原则上不超过半小时）需要大量内存和核心，可以在群里提前告知下。大家可以错峰运行程序。</p><p><strong>如果使用的资源超过一半，引起他人投诉2次，会被暂停使用1周。再犯我们可能会注销账号使用权。</strong></p><p><strong>关于费用：</strong></p><p>付费成功后，服务器账号一旦开通，<strong>不支持退款</strong>，如果因为单位报销不了费用，请自行解决。</p><p>我们提供的服务器，其实是我们生信技能树提供给粉丝的福利，请务必合理和谐使用。互相体谅一下。不要指望几百块钱完成你几十万的测序数据的分析，给其他人留一下空间，不要长期霸占计算资源，大家都互相看着。</p><p>关于定价及收费的问题。在此做个统一解释和回复。正因为我们考虑到技能树的粉丝中是大部分学生，没有什么额外收入，才会定到如此低的价格。后续续费的价格原则是不增加的。我们基本上需要连续3年才能把服务器硬件费用、宽带及电费才能收回来（这还不包含我们技能树的人工成本）。相当于是技能树给粉丝的福利了。</p><p><strong>关于修改群昵称：</strong></p><p>为了方便服务器管理，所有人把【昵称】改为用户名，如 小A 同学的用户名为 vip01，则将昵称改为 vip01-小A</p><p><strong>关于数据上传下载：</strong></p><p>服务器采用的是共享千兆网络，但是涉及到较大的文件上传或下载（总文件大小超过10G），建议在半夜上传下载，以免影响他人操作。</p><p><strong>关于扩容：</strong></p><p>这里指的是磁盘空间的扩容，每个用户的默认使用磁盘空间为 500G，一旦超出，就会被限制使用。如果需要<strong>扩容较多的空间</strong>，请留意群通知，会不定期批量扩容，没有通知就不要在群里问什么时候扩容了。</p><h1 id="Q1：服务器登陆"><a href="#Q1：服务器登陆" class="headerlink" title="Q1：服务器登陆"></a>Q1：服务器登陆</h1><h3 id="1-ip地址是什么？"><a href="#1-ip地址是什么？" class="headerlink" title="1.   ip地址是什么？"></a>1.   ip地址是什么？</h3><p>IP地址是由一串数字和“.”号组成的，用来识别每台计算机的数字，也就是说每台电脑都会有一个唯一的IP地址。可以通过以下方法查询自己电脑的IP地址。</p><p><img src="/2021/09/12/fuwuqi/1.png" alt="img"></p><p>注：上面查询到的ip地址，只是个人电脑的ip地址，并不是连接服务器的ip地址，连接服务器的ip地址是通过邮箱发给个人的。</p><h3 id="2-端口是什么？"><a href="#2-端口是什么？" class="headerlink" title="2.   端口是什么？"></a>2.   端口是什么？</h3><p>端口是一串数字，用来寻找计算机上的某个软件。它通常和IP地址一起连用，通过每台电脑唯一的IP地址来确定信息传递的过程中的传递方向，在通过特定的端口来确定信息要传递到电脑上的哪一个软件中。就好比网购填的收货地址一样，省、市对应IP地址，门牌号对应端口。</p><p>端口的查询可以进入电脑的cmd命令操作界面（进入方法如上图）输入 netstat -na 命令即可。</p><p><img src="/2021/09/12/fuwuqi/2.png" alt="img"></p><p>注：图片中显示的端口只是个人电脑中的端口，不是连接服务器时用到的端口</p><h3 id="3-ssh是什么？"><a href="#3-ssh是什么？" class="headerlink" title="3.   ssh是什么？"></a>3.   ssh是什么？</h3><p>ssh是一种用于电脑与电脑之间加密传输信息的一种方式，类似于摩斯密码一样，将正常的语言进行加密，避免信息被破译。</p><p>具体内容可以参考： <a href="https://mp.weixin.qq.com/s/_hcU56Q1xgTlwVZKujQmiw">https://mp.weixin.qq.com/s/_hcU56Q1xgTlwVZKujQmiw</a></p><p>服务器的登陆需要在电脑上下载Xshell或finalshell这两个软件(推荐后者)，Mac电脑登陆方式和Windows的又略有不同，下面就分开介绍。</p><h3 id="4-mac电脑登录"><a href="#4-mac电脑登录" class="headerlink" title="4.   mac电脑登录"></a>4.   mac电脑登录</h3><p>Mac 电脑自带 ssh 协议，因此登陆的时直接打开 <strong>终端 Terminal</strong> 输入 ：</p><p>ssh 用户名@IP -p 端口号</p><p>注：其中的 IP 地址已经更新为域名： <strong>biotrainee.vip</strong></p><h3 id="5-Windows电脑登录"><a href="#5-Windows电脑登录" class="headerlink" title="5.   Windows电脑登录"></a>5.   Windows电脑登录</h3><p>5.1 Xshell 登陆</p><p>下载安装 xshell 软件：<a href="https://www.netsarang.com/en/free-for-home-school/">https://www.netsarang.com/en/free-for-home-school/</a></p><p>打开 xshell ，按下图操作：注：其中的 IP 地址已经更新为域名： <strong>biotrainee.vip</strong></p><p><img src="/2021/09/12/fuwuqi/3.png" alt="img"><img src="/2021/09/12/fuwuqi/4.png" alt="img"></p><p>5.2 finalshell 登陆</p><p>下载安装 finalshell ：<a href="https://www.hostbuf.com/t/988.html">finalShell连接</a></p><p>然后按这个教程操作：<a href="https://mp.weixin.qq.com/s/nTmdH9KyxXU2LvgcE7uV7A">如何登陆共享云服务器及Rstudio-server</a></p><h1 id="Q2：Rstudio-server登陆"><a href="#Q2：Rstudio-server登陆" class="headerlink" title="Q2：Rstudio-server登陆"></a>Q2：Rstudio-server登陆</h1><p>首先打开浏览器、再在地址栏输入 <strong>IP:端口</strong> 然后在弹出的页面中输入用户名和密码即可（注：其中的 IP 地址已经更新为域名： <strong>biotrainee.vip</strong>）</p><p><img src="/2021/09/12/fuwuqi/5.png" alt="img"><img src="/2021/09/12/fuwuqi/6.png" alt="img"></p><h3 id="Rstudio-server的退出"><a href="#Rstudio-server的退出" class="headerlink" title="Rstudio-server的退出"></a>Rstudio-server的退出</h3><p>退出Rstudio-server最好不要直接关闭网页，否则有可能导致以后登陆Rserver报错。</p><p>在退出之前该保存保存好，然后清理掉变量，最后退出即可</p><h1 id="Q3：文件上传和下载"><a href="#Q3：文件上传和下载" class="headerlink" title="Q3：文件上传和下载"></a>Q3：文件上传和下载</h1><h3 id="1-FileZilla"><a href="#1-FileZilla" class="headerlink" title="1.   FileZilla"></a>1.   FileZilla</h3><p><img src="/2021/09/12/fuwuqi/7.png" alt="img"></p><h3 id="2-Xftp"><a href="#2-Xftp" class="headerlink" title="2.   Xftp"></a>2.   Xftp</h3><p>如果使用 xshell 可以登录服务器后双击下面图标打开 Xftp </p><h3 id="3-FinalShell"><a href="#3-FinalShell" class="headerlink" title="3.   FinalShell"></a>3.   FinalShell</h3><p>使用FinalShell登陆服务器后，窗口最下方会显示目录结构，点击“↓”即可下载服务器中的文件；点击“↑”即可向服务器上传电脑中的文件</p><h1 id="Q4：conda的安装和使用"><a href="#Q4：conda的安装和使用" class="headerlink" title="Q4：conda的安装和使用"></a>Q4：conda的安装和使用</h1><p>关于服务器权限的问题，大家都是普通用户，无root权限。凡是涉及到 sudo / apt / yum / root 等安装方法，作为服务器的普通用户，都是无法使用的，建议放弃这种方法。绝大多数的软件可以通过conda安装，方法参考：<a href="https://mp.weixin.qq.com/s/s5uuf7bTqZMuKvlssz-uWw">https://mp.weixin.qq.com/s/s5uuf7bTqZMuKvlssz-uWw</a></p><h1 id="Q5：服务器无法登陆？"><a href="#Q5：服务器无法登陆？" class="headerlink" title="Q5：服务器无法登陆？"></a>Q5：服务器无法登陆？</h1><p>1 登陆报错后请仔细查看邮件并比较登陆方法中的 IP 、 用户名 、 端口是否输入错误</p><p>2 Windows电脑使用Xshell登陆服务器显示以下情况请仔细阅读 服务器登陆方法</p><p><img src="/2021/09/12/fuwuqi/8.png" alt="img"></p><p>3 以上两点错误均排除后使用Xshell仍无法登陆，可尝试换用FinalShell登陆 </p><p>链接：<a href="https://pan.baidu.com/s/1g7CGUBctF_smdxd3tt16PQ">https://pan.baidu.com/s/1g7CGUBctF_smdxd3tt16PQ</a> 提取码：pja7 </p><h1 id="Q6：Rserver无法登陆？"><a href="#Q6：Rserver无法登陆？" class="headerlink" title="Q6：Rserver无法登陆？"></a>Q6：Rserver无法登陆？</h1><p>1 检查登陆方式是否正确 （IP 端口是否弄错了）</p><p>2 查看自己用户名和密码是否输入错误</p><p>（大部分无法登陆的原因都是第1点和第2点）</p><p>3 清空浏览器cookie缓存</p><p>4 换个浏览器登陆</p><p>5 查看自己的磁盘存储空间是否用尽（方法见Q19），因为登录Rsevre会在家目录中拷贝一些内容，若磁盘存储空间用尽，没办法写入东西，自然就登录不了。</p><p>6 当以上办法都没用时，就可以使用这个终极大招了</p><p>首先登陆到服务器中，在家目录中找到并进入.rstudio这个隐藏目录，然后删除这个目录中的session文件夹。最后重新登陆Rsever即可</p><p>find ~/.local/share/rstudio -name “sessions” -exec rm -r {} ;</p><p>代码如上，不过在确保自己有关R的目录名称都是没有改动的，不然可能会带来些意外；最后提醒 rm -r 命令用时需谨慎</p><p>如果上面的命令尝试失败，再试试用：</p><p> mv ~/.rstudio ~/.rstudio.old</p><h1 id="Q7：如何调用服务器上的R包？"><a href="#Q7：如何调用服务器上的R包？" class="headerlink" title="Q7：如何调用服务器上的R包？"></a>Q7：如何调用服务器上的R包？</h1><p>参考链接：<a href="https://blog.csdn.net/yijiaobani/article/details/89497342">https://blog.csdn.net/yijiaobani/article/details/89497342</a></p><p>这里涉及.libPaths()这个命令和.Rprofile这个文件。先看下.libPaths()的作用是什么，这个函数作用的官方解释如上图。简单来说.libPaths()是用来搜索R包的路径。例如：直接在Rserver中输入.libPaths()就会显示调用R包的路径（如下图）</p><p><img src="/2021/09/12/fuwuqi/9.png" alt="img"></p><p>如果想在调用服务器中的R包有两种方法，第一种方法需要每次登陆服务器中都设置一下；第二种是一次设置长期有效。</p><p>1 直接在.libPaths()中输入服务器公共R包的路径即可。</p><p>结果如下图，首先调用ggplot2，报错说不存在这个R包。然后.libPaths()查看现有R包路径，这两个路径是默认的，里面没有安装过ggplot2，所以报错也是应该的。接着.libPaths(“/home/data/refdir/Rlib”)设置公共目录R包的路径，最后library(ggplot2)调用成功</p><p><img src="/2021/09/12/fuwuqi/10.png" alt="img"></p><p>2 登陆服务器创建一个.Rprofile然后在这个文件中输入你要调用R包的位置即可。</p><p>代码如下：</p><p>echo “.libPaths(c(‘/home/data/vipxx/R/x86_64-pc-linux-gnu-library/4.1’,’/home/data/refdir/Rlib’,’/usr/local/lib/R/library’,’/usr/local/lib/R/site-library’))” &gt;&gt; ~/.Rprofile &amp;&amp; cat .Rprofile</p><p><img src="/2021/09/12/fuwuqi/11.png" alt="img"></p><p> 注意：这里的 vipxx 要换成自己的用户名，另一点值得注意的是，创建了 .Rprofile 添加了路径后可能不会立即生效， 可能需要过一天才行。</p><h1 id="Q8：如何给自己的家目录设置权限？"><a href="#Q8：如何给自己的家目录设置权限？" class="headerlink" title="Q8：如何给自己的家目录设置权限？"></a>Q8：如何给自己的家目录设置权限？</h1><p>用 chmod 命令</p><p>chmod -R 700 $user</p><h1 id="Q9：如何查看自己的磁盘存储空间？"><a href="#Q9：如何查看自己的磁盘存储空间？" class="headerlink" title="Q9：如何查看自己的磁盘存储空间？"></a>Q9：如何查看自己的磁盘存储空间？</h1><p> 大家可以用 quota -uvs 命令查看自己的硬盘容量，默认是 500G，用 du -sh ~ 查看已使用的空间。</p><p>quota -uvs user</p><p>du -sh ~</p><p><img src="/2021/09/12/fuwuqi/12.png" alt="img"></p><p>第一列space表示你现在用了多少存储空间，而不是剩余多少空间。</p><p>第二列quota表示服务器对你软限制空间是多少。</p><p>第三列limit表示服务器对你的硬限制是多少。</p><p>第四列grace time表示当你使用的内存介于软限制和硬限制之间时，服务器对你的宽限时间，即在这段限制的时间内你需要管理你的存储空间，使其容量低于软限制。</p><p>第五列files表示你现有的文件个数。</p><p>第六列quota表示服务器对你文件个数的软限制。</p><p>第七列limit表示服务器对你文件个数的硬限制。</p><h1 id="Q10：conda-install-无法安装软件？"><a href="#Q10：conda-install-无法安装软件？" class="headerlink" title="Q10：conda install 无法安装软件？"></a>Q10：conda install 无法安装软件？</h1><p><img src="/2021/09/12/fuwuqi/13.png" alt="img"></p><p>网络较长，换个时间试试</p><p>conda clean 清空一下环境中的缓存</p><p>把 ~/.condarc 中的 https 改成 http</p><p>删除conda后重新下载一个</p><h1 id="Q11：关闭电脑后怎么继续在服务器上运行程序？"><a href="#Q11：关闭电脑后怎么继续在服务器上运行程序？" class="headerlink" title="Q11：关闭电脑后怎么继续在服务器上运行程序？"></a>Q11：关闭电脑后怎么继续在服务器上运行程序？</h1><p><a href="https://mp.weixin.qq.com/s/DbzYmGSrINbyZcEOl-qQPg">https://mp.weixin.qq.com/s/DbzYmGSrINbyZcEOl-qQPg</a></p><p>后台运行 nohup 。。。&amp; </p><h1 id="Q12：Rserver中怎么调用自己电脑中的数据？"><a href="#Q12：Rserver中怎么调用自己电脑中的数据？" class="headerlink" title="Q12：Rserver中怎么调用自己电脑中的数据？"></a>Q12：Rserver中怎么调用自己电脑中的数据？</h1><p><img src="/2021/09/12/fuwuqi/14.png" alt="img"></p><p>这里面有3个关键词：服务器、自己的数据、Rserver。</p><p>服务器本身就是一台电脑，只不过是一台没有显示器但内存和存贮空间十分大的且十分笨重的一台大型电脑。</p><p>Rserver是搭建在服务器上的类似于Rstudio一样的编程界面，Rserver的存在就像Rstudio一样方便在服务器中编程。</p><p>因此，服务器就相当于个人的电脑，Rserver就好比个人电脑上的Rstudio。所以在Rserver中设置工作目录和在Rstudio中没差别，需要调用自己电脑中的数据就把数据上传到服务器中即可。</p><p>图一是服务器中显示家目录中的文件，图二是Rserver中显示工作目录下的文件。</p><p><img src="/2021/09/12/fuwuqi/15.png" alt="img"></p><p><img src="/2021/09/12/fuwuqi/16.png" alt="img"><img src="/2021/09/12/fuwuqi/17.png" alt="img"></p><h1 id="Q13：怎么查看自己家目录使用了多少存储空间"><a href="#Q13：怎么查看自己家目录使用了多少存储空间" class="headerlink" title="Q13：怎么查看自己家目录使用了多少存储空间"></a>Q13：怎么查看自己家目录使用了多少存储空间</h1><p>直接在服务器中输入  ncdu </p><p><img src="/2021/09/12/fuwuqi/18.png" alt="img"></p><h1 id="Q14：如和查看自己是否在docker组中"><a href="#Q14：如和查看自己是否在docker组中" class="headerlink" title="Q14：如和查看自己是否在docker组中"></a>Q14：如和查看自己是否在docker组中</h1><p>通常来说新用户是不在docker组中，要加入docker组需要@唐医生说明自己要加入docker组。然后可以通过 <strong>docker ps</strong> 命令查看自己是否加入了</p><p><img src="/2021/09/12/fuwuqi/19.png" alt="img"></p><p>以上显示是未加入docker组</p><p><img src="/2021/09/12/fuwuqi/201.png" alt="img"></p><p>以上显示是已经成功加入了docker组</p><h1 id="Q15：能不能开发票"><a href="#Q15：能不能开发票" class="headerlink" title="Q15：能不能开发票"></a>Q15：能不能开发票</h1><p>可以开，但是不要催</p><p>发票可以选择以下4个条目：</p><p>• 研发和技术服务*测试费</p><p>• 会议服务*会议费</p><p>• 现代服务*培训费</p><p>• 现代服务*数据分析费</p><p>但是拒绝试剂耗材等虚假发票要求！</p><h1 id="Q16：filezilla-为啥链接不上去"><a href="#Q16：filezilla-为啥链接不上去" class="headerlink" title="Q16：filezilla 为啥链接不上去"></a>Q16：filezilla 为啥链接不上去</h1><p>红字说的很清楚，把FTP协议改成SFTP协议就可以了</p><p><img src="/2021/09/12/fuwuqi/20.png" alt="img"></p><h1 id="Q17：遇到别的错误怎么办？"><a href="#Q17：遇到别的错误怎么办？" class="headerlink" title="Q17：遇到别的错误怎么办？"></a>Q17：遇到别的错误怎么办？</h1><p>微信搜索、必应谷歌搜索、生信技能树搜索，实在解决不了，在群里求助，注意一下提问方式</p><h1 id="Q18：安装-jupyter"><a href="#Q18：安装-jupyter" class="headerlink" title="Q18：安装 jupyter"></a>Q18：安装 jupyter</h1><p>服务器只配置了 Rstudio-server，没有配置 jupyter ，如果有需要，请使用普通用户的安装方法，然后进行隧道转发，一个参考的隧道转发方法是：</p><p>需要使用服务器 jupyter notebook 的用户，请自己下载MobaXterm客户端。不需要做什么设置即可SSH 隧道转发浏览器访问使用。<img src="/2021/09/12/fuwuqi/21.png" alt="img"></p><p><img src="file:///C:/Users/53446/AppData/Local/Temp/msohtmlclip1/01/clip_image049.jpg" alt="img"></p><p>xshell putty finalshell 等等其实也可以 就是需要设置ssh tunnel（隧道） 转发。网上也有相关教程。设置相对繁琐点。我无意发现 mobaxterm 不需要设置即可自动ssh 转发。</p><h1 id="Q19：服务器公共数据介绍"><a href="#Q19：服务器公共数据介绍" class="headerlink" title="Q19：服务器公共数据介绍"></a>Q19：服务器公共数据介绍</h1><p>服务器上已经保存了许多公共数据，在这个目录下：/home/data/refdir/</p><h3 id="database："><a href="#database：" class="headerlink" title="database："></a>database：</h3><p>主要是 TCGA GEO GTEX 等公共数据</p><p><img src="/2021/09/12/fuwuqi/22.png" alt="img"></p><h3 id="Rlib"><a href="#Rlib" class="headerlink" title="Rlib"></a>Rlib</h3><p>上面问题 Q7 提到的R包</p><p><img src="/2021/09/12/fuwuqi/23.png" alt="img"></p><h3 id="server："><a href="#server：" class="headerlink" title="server："></a>server：</h3><p>一些常见的软件或者数据库文件、参考基因组、index 及其注释文件 gtf 等。以人类和小鼠的数据为主</p><p><img src="/2021/09/12/fuwuqi/24.png" alt="img"></p><h1 id="Q20：如何看自己使用的资源有没有超过一半？"><a href="#Q20：如何看自己使用的资源有没有超过一半？" class="headerlink" title="Q20：如何看自己使用的资源有没有超过一半？"></a>Q20：如何看自己使用的资源有没有超过一半？</h1><p>如果是在 Linux 提交任务，一般命令会有线程或核心、内存相关的设置参数，查看其帮助文档了解相关参数。注意，如果是多任务提交，应该算总任务不超过一半资源。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
